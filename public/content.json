{"meta":{"title":"星云比特","subtitle":null,"description":null,"author":"xingyunbite","url":"http://xingyunbite.github.com"},"pages":[],"posts":[{"title":"比特币挖矿之全网难度","slug":"比特币挖矿之全网难度","date":"2018-02-09T04:24:39.000Z","updated":"2018-02-09T08:06:46.994Z","comments":false,"path":"2018/02/09/比特币挖矿之全网难度/","link":"","permalink":"http://xingyunbite.github.com/2018/02/09/比特币挖矿之全网难度/","excerpt":"","text":"2018年2月7日，比特币全网难度再次提升10.43%，而这对于正经历币价大跌的矿工来说，挖矿难度的提升，意味着挖矿收益进一步下降。那么在比特币系统中，挖矿难度究竟是如何调整的呢？ 难度表示上文中提到，矿工在打包区块的时候，合格的区块应该满足:1SHA256(SHA256(BlockHeader))&lt;F(nBits) 这儿的nBits正是难度的一种压缩表达方式。前两位十六进制数字为幂(bits_exponent),后六位为系数(bits_coefficient)1current_target = bits_coefficient * 2^(8 * (bits_exponent-3)) 以508230区块为例，此区块对应的bits为0x1761e9f8123current_target = 0x61e9f8 *2^(0x08*(0x17-3)) = 0x61e9f8 *2^(0x08*0x14) = 0x61e9f8 *2^0xA0 按十进制计算为:1current_target = 6,416,888 * 2^160 转换为十六进制后为:1current_target =0x00000000000000000061e9f80000000000000000000000000000000000000000 而记录到区块链上的该高度对应的区块头的hash值为0000000000000000003692a92ed937e4e0a5f247e27feeeb4df383e6d9c2bd94,满足要求。 创世区块的bits值在代码中是写死的，具体代码如下:1genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN); 其中各参数含义如下:1231006505:时间戳，对应北京时间:2009/1/4 2:15:52083236893:nNonce,随机数0x1d00ffff:bits,难度的压缩表示1:版本号50:区块奖励数 难度调整上面提到，比特币的挖矿难度是可调整的，那么这个难度为什么需要调整？由谁来调整？如何调整？ 比特币系统平均每10分钟生成一个区块，而全网的算力是变化的，为了应对全网算力可能在一定时间内发生暴增或者骤减的情况，保持每10分钟产生一个新区块的产生速率，比特币采用这样一种难度调整机制:每2016个区块，所有节点调整一次难度，难度的调整公式如下：1New Difficulty = Old Difficulty * (Actual Time of Last 2016 Blocks / 20160 minutes) 通过上述公式，比特币系统便能实现当区块产生速率比10分钟要快时，增加难度。如果发现比10分钟慢时，则降低难度。当然这种调整无法及时应对币价暴跌导致全网算力骤减的情况。 在矿工每次打包新的区块的时候，会对下一个区块的高度进行判断1、当高度不是2016的倍数时，会直接返回上一个区块的bit2、当高度是2016的倍数时，会根据上面提到的难度调整公式进行计算。 为了防止难度的变化过快，每隔周期的调整幅度必须有一定的限制。如果调整幅度大于4倍，则按4倍调整，因此当难度变化过快时，可能要经过几个2016区块周期才会完成。","categories":[],"tags":[],"keywords":[]},{"title":"linux下Zcash钱包使用教程","slug":"linux下Zcash钱包使用教程","date":"2018-02-07T18:04:15.000Z","updated":"2018-02-09T07:51:52.782Z","comments":false,"path":"2018/02/08/linux下Zcash钱包使用教程/","link":"","permalink":"http://xingyunbite.github.com/2018/02/08/linux下Zcash钱包使用教程/","excerpt":"","text":"Zcash (ZEC)是首个使用零知识证明机制的区块链系统，它可提供完全的支付保密性，同时仍能够使用公有区块链来维护一个去中心化网络。与比特币相同的是，Zcash代币（ZEC）的总量也是2100万，不同之处在于，Zcash交易自动隐藏区块链上所有交易的发送者、接受者及数额。只用那些拥有查看秘钥的人才能看到交易的内容。用户拥有完全的控制权，他们可自行选择向其他人提供查看秘钥. ZCash 是 bitcoin 的分支，保留了 bitcoin 原有的模式，基于比特币 0.11.2 版代码修改的。 ZCash 钱包资金分 2 种：透明资金、私有资金，透明资金类似比特币资金；私有资金加强了 隐私性，涉及到私有资金的交易是保密不可查的，透明资金与透明资金的交易是公开可查的. 目前Zcash流通市值在12亿美元左右，每日交易额也高达1亿美元，其使用zero-knowledge proof（零知识证明）使得数字化货币更加具有安全性；隐私性而备受市场关注。 现在zcash官方提供的钱包是linux版本的，而原因是zcash团队没人熟悉gui，不过zcash官方提供了编译后的可执行程序，这里也不用我们来进行编译了。 下载地址 ： https://z.cash/downloads/zcash-1.0.14-linux64.tar.gzhash : 352ea2a67ae3484046a6bd43af9a5ce125e2d103a6a32ac71805658918f7076a 下载后请务必进行哈希值验证，以保证文件的真实和准确性。 tar -xvf zcash-1.0.14-linux64.tar.gz //解压缩mv -t /usr/local/bin/ zcash-1.0.14/bin/* //移动可执行文件 现在我们已经安装了zcash，运行下面的命令下载 key ，用于创建和验证参数。 zcash-fetch-params 这里由于国内网络的原因，可能会失败，请多试几次。 验证通过后，我们需要对客户端进行配置。 mkdir ~/.zcash //创建zcash目录 vim zcash.conf 以上按照个人配置的不同，设置不同的配置文件，下面提供一个配置供参考。 //这是测试链接的配置 addnode=testnet.z.cash //节点 rpcuser=test //rpc用户名 rpcpassword=test //rpc密码 gen=0 //屏蔽cpu挖矿 testnet=1 //开启测试链 rpcallowip=100.100.60.10 //允许访问的IP rpcport=8333 //rpc端口号 equihashsolver=tromp //指定算法，非挖矿钱包可以删除 好了，保存后输入zcashd就可以启动zcash客户端了，也可以使用zcashd -daemon在后台运行zcash客户端,在shell输入zcash-cli getinfo命令就可以看到网络和块信息了。 下面提供一些zcash节点常用命令： zcash-cli getinfo //显示节点信息 zcashd -daemon //后台启动zcash守护 zcash-cli getnetworkhashps //获取全网算力 zcash-cli z_getnewaddress //生成一个Z-addr zcash-cli getnewaddress //生成一个t-addr zcas-cli getblockhash //区块高度 zcash-cli getaddressesbyaccount &quot;&quot; //显示所有t-addr钱包 zcash-cli z_listaddresses //显示所有Z-addr钱包 zcash-cli z_getbalance &quot;&quot; //z钱包余额 如果有其他的需要，可以使用zcash-cli help来查看zcash的全部命令。 附1： zcash钱包配置： //这里是zcash钱包主链配置 rpcuser=rpc用户名 rpcpassword=rpc密码 rpcport=rpc端口 rpcallowip=允许链接rpc ip地址 server=1 //打开服务 daemon=1 //后台运行守护 mainnet=1 //主链 addnode=mainnet.z.cash //主链节点 附2： //zcash命令 == Blockchain == getbestblockhash getblock &quot;hash|height&quot; ( verbose ) getblockchaininfo getblockcount getblockhash index getblockheader &quot;hash&quot; ( verbose ) getchaintips getdifficultygetmempoolinfogetrawmempool ( verbose ) gettxout “txid” n ( includemempool ) gettxoutproof [“txid”,…] ( blockhash ) gettxoutsetinfo verifychain ( checklevel numblocks ) verifytxoutproof “proof” == Control == getinfo help ( &quot;command&quot; ) stop == Disclosure == z_getpaymentdisclosure &quot;txid&quot; &quot;js_index&quot; &quot;output_index&quot; (&quot;message&quot;) z_validatepaymentdisclosure &quot;paymentdisclosure&quot; == Generating == generate numblocks getgenerate setgenerate generate ( genproclimit ) == Mining == getblocksubsidy height getblocktemplate ( &quot;jsonrequestobject&quot; ) getlocalsolps getmininginfo getnetworkhashps ( blocks height ) getnetworksolps ( blocks height ) prioritisetransaction &lt;txid&gt; &lt;priority delta&gt; &lt;fee delta&gt; submitblock &quot;hexdata&quot; ( &quot;jsonparametersobject&quot; ) == Network == addnode &quot;node&quot; &quot;add|remove|onetry&quot; clearbanned disconnectnode &quot;node&quot; getaddednodeinfo dns ( &quot;node&quot; ) getconnectioncount getnettotals getnetworkinfo getpeerinfo listbanned ping setban &quot;ip(/netmask)&quot; &quot;add|remove&quot; (bantime) (absolute) == Rawtransactions == createrawtransaction [{&quot;txid&quot;:&quot;id&quot;,&quot;vout&quot;:n},...] {&quot;address&quot;:amount,...} decoderawtransaction &quot;hexstring&quot; decodescript &quot;hex&quot; fundrawtransaction &quot;hexstring&quot; getrawtransaction &quot;txid&quot; ( verbose ) sendrawtransaction &quot;hexstring&quot; ( allowhighfees ) signrawtransaction &quot;hexstring&quot; ( [{&quot;txid&quot;:&quot;id&quot;,&quot;vout&quot;:n,&quot;scriptPubKey&quot;:&quot;hex&quot;,&quot;redeemScript&quot;:&quot;hex&quot;},...] [&quot;privatekey1&quot;,...] sighashtype ) == Util == createmultisig nrequired [&quot;key&quot;,...] estimatefee nblocks estimatepriority nblocks validateaddress &quot;zcashaddress&quot; verifymessage &quot;zcashaddress&quot; &quot;signature&quot; &quot;message&quot; z_validateaddress &quot;zaddr&quot; == Wallet == addmultisigaddress nrequired [&quot;key&quot;,...] ( &quot;account&quot; ) backupwallet &quot;destination&quot; dumpprivkey &quot;zcashaddress&quot; dumpwallet &quot;filename&quot; encryptwallet &quot;passphrase&quot; getaccount &quot;zcashaddress&quot; getaccountaddress &quot;account&quot; getaddressesbyaccount &quot;account&quot; getbalance ( &quot;account&quot; minconf includeWatchonly ) getnewaddress ( &quot;account&quot; ) getrawchangeaddress getreceivedbyaccount &quot;account&quot; ( minconf ) getreceivedbyaddress &quot;zcashaddress&quot; ( minconf ) gettransaction &quot;txid&quot; ( includeWatchonly ) getunconfirmedbalance getwalletinfo importaddress &quot;address&quot; ( &quot;label&quot; rescan ) importprivkey &quot;zcashprivkey&quot; ( &quot;label&quot; rescan ) importwallet &quot;filename&quot; keypoolrefill ( newsize ) listaccounts ( minconf includeWatchonly) listaddressgroupings listlockunspent listreceivedbyaccount ( minconf includeempty includeWatchonly) listreceivedbyaddress ( minconf includeempty includeWatchonly) listsinceblock ( &quot;blockhash&quot; target-confirmations includeWatchonly) listtransactions ( &quot;account&quot; count from includeWatchonly) listunspent ( minconf maxconf [&quot;address&quot;,...] ) lockunspent unlock [{&quot;txid&quot;:&quot;txid&quot;,&quot;vout&quot;:n},...] move &quot;fromaccount&quot; &quot;toaccount&quot; amount ( minconf &quot;comment&quot; ) sendfrom &quot;fromaccount&quot; &quot;tozcashaddress&quot; amount ( minconf &quot;comment&quot; &quot;comment-to&quot; ) sendmany &quot;fromaccount&quot; {&quot;address&quot;:amount,...} ( minconf &quot;comment&quot; [&quot;address&quot;,...] ) sendtoaddress &quot;zcashaddress&quot; amount ( &quot;comment&quot; &quot;comment-to&quot; subtractfeefromamount ) setaccount &quot;zcashaddress&quot; &quot;account&quot; settxfee amount signmessage &quot;zcashaddress&quot; &quot;message&quot; z_exportkey &quot;zaddr&quot; z_exportviewingkey &quot;zaddr&quot; z_exportwallet &quot;filename&quot; z_getbalance &quot;address&quot; ( minconf ) z_getnewaddress z_getoperationresult ([&quot;operationid&quot;, ... ]) z_getoperationstatus ([&quot;operationid&quot;, ... ]) z_gettotalbalance ( minconf includeWatchonly ) z_importkey &quot;zkey&quot; ( rescan startHeight ) z_importviewingkey &quot;vkey&quot; ( rescan startHeight ) z_importwallet &quot;filename&quot; z_listaddresses ( includeWatchonly ) z_listoperationids z_listreceivedbyaddress &quot;address&quot; ( minconf ) z_sendmany &quot;fromaddress&quot; [{&quot;address&quot;:... ,&quot;amount&quot;:...},...] ( minconf ) ( fee ) z_shieldcoinbase &quot;fromaddress&quot; &quot;tozaddress&quot; ( fee ) ( limit ) zcbenchmark benchmarktype samplecount zcrawjoinsplit rawtx inputs outputs vpub_old vpub_new zcrawkeygen zcrawreceive zcsecretkey encryptednote zcsamplejoinsplit","categories":[],"tags":[],"keywords":[]}]}